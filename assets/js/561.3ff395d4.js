(window.webpackJsonp=window.webpackJsonp||[]).push([[561],{878:function(v,_,a){"use strict";a.r(_);var r=a(7),e=Object(r.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"yarn"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#yarn"}},[v._v("#")]),v._v(" YARN")]),v._v(" "),_("blockquote",[_("p",[v._v("YARN 的目标是解决 MapReduce 的缺陷。")])]),v._v(" "),_("h2",{attrs:{id:"mapreduce-的缺陷-hadoop-1-x"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mapreduce-的缺陷-hadoop-1-x"}},[v._v("#")]),v._v(" MapReduce 的缺陷（Hadoop 1.x）")]),v._v(" "),_("ul",[_("li",[v._v("身兼两职：计算框架 + 资源管理框架")]),v._v(" "),_("li",[v._v("JobTracker\n"),_("ul",[_("li",[v._v("既做资源管理，又做任务调度")]),v._v(" "),_("li",[v._v("任务太重，开销过大")]),v._v(" "),_("li",[v._v("存在单点故障")])])]),v._v(" "),_("li",[v._v("资源描述模型过于简单，资源利用率较低\n"),_("ul",[_("li",[v._v("仅把 Task 数量看作资源，没有考虑 CPU 和内存")]),v._v(" "),_("li",[v._v("强制把资源分成 Map Task Slot 和 Reduce Task Slot")])])]),v._v(" "),_("li",[v._v("扩展性较差，集群规模上限 4K")]),v._v(" "),_("li",[v._v("源码难于理解，升级维护困难")])]),v._v(" "),_("h2",{attrs:{id:"yarn-简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#yarn-简介"}},[v._v("#")]),v._v(" YARN 简介")]),v._v(" "),_("p",[v._v("YARN(Yet Another Resource Negotiator，另一种资源管理器)是一个"),_("strong",[v._v("分布式通用资源管理系统")]),v._v("。")]),v._v(" "),_("p",[v._v("设计目标：聚焦资源管理、通用（适用各种计算框架）、高可用、高扩展。")]),v._v(" "),_("h2",{attrs:{id:"yarn-系统架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#yarn-系统架构"}},[v._v("#")]),v._v(" YARN 系统架构")]),v._v(" "),_("ul",[_("li",[v._v("主从结构（master/slave）")]),v._v(" "),_("li",[v._v("将 JobTracker 的资源管理、任务调度功能分离")]),v._v(" "),_("li",[v._v("三种角色：\n"),_("ul",[_("li",[v._v("ResourceManager（Master） - 集群资源的统一管理和分配")]),v._v(" "),_("li",[v._v("NodeManager（Slave） - 管理节点资源，以及容器的生命周期")]),v._v(" "),_("li",[v._v("ApplicationMaster（新角色） - 管理应用程序实例，包括任务调度和资源申请")])])])]),v._v(" "),_("h3",{attrs:{id:"resourcemanager-rm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#resourcemanager-rm"}},[v._v("#")]),v._v(" ResourceManager（RM）")]),v._v(" "),_("p",[_("strong",[v._v("主要功能")])]),v._v(" "),_("ul",[_("li",[v._v("统一管理集群的所有资源")]),v._v(" "),_("li",[v._v("将资源按照一定策略分配给各个应用（ApplicationMaster）")]),v._v(" "),_("li",[v._v("接收 NodeManager 的资源上报信息")])]),v._v(" "),_("p",[_("strong",[v._v("核心组件")])]),v._v(" "),_("ul",[_("li",[v._v("用户交互服务（User Service）")]),v._v(" "),_("li",[v._v("NodeManager 管理")]),v._v(" "),_("li",[v._v("ApplicationMaster 管理")]),v._v(" "),_("li",[v._v("Application 管理")]),v._v(" "),_("li",[v._v("安全管理")]),v._v(" "),_("li",[v._v("资源管理")])]),v._v(" "),_("h3",{attrs:{id:"nodemanager-nm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#nodemanager-nm"}},[v._v("#")]),v._v(" NodeManager（NM）")]),v._v(" "),_("p",[_("strong",[v._v("主要功能")])]),v._v(" "),_("ul",[_("li",[v._v("管理单个节点的资源")]),v._v(" "),_("li",[v._v("向 ResourceManager 汇报节点资源使用情况")]),v._v(" "),_("li",[v._v("管理 Container 的生命周期")])]),v._v(" "),_("p",[_("strong",[v._v("核心组件")])]),v._v(" "),_("ul",[_("li",[v._v("NodeStatusUpdater")]),v._v(" "),_("li",[v._v("ContainerManager")]),v._v(" "),_("li",[v._v("ContainerExecutor")]),v._v(" "),_("li",[v._v("NodeHealthCheckerService")]),v._v(" "),_("li",[v._v("Security")]),v._v(" "),_("li",[v._v("WebServer")])]),v._v(" "),_("h3",{attrs:{id:"applicationmaster-am"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#applicationmaster-am"}},[v._v("#")]),v._v(" ApplicationMaster（AM）")]),v._v(" "),_("p",[_("strong",[v._v("主要功能")])]),v._v(" "),_("ul",[_("li",[v._v("管理应用程序实例")]),v._v(" "),_("li",[v._v("向 ResourceManager 申请任务执行所需的资源")]),v._v(" "),_("li",[v._v("任务调度和监管")])]),v._v(" "),_("p",[_("strong",[v._v("实现方式")])]),v._v(" "),_("ul",[_("li",[v._v("需要为每个应用开发一个 AM 组件")]),v._v(" "),_("li",[v._v("YARN 提供 MapReduce 的 ApplicationMaster 实现")]),v._v(" "),_("li",[v._v("采用基于事件驱动的异步编程模型，由中央事件调度器统一管理所有事件")]),v._v(" "),_("li",[v._v("每种组件都是一种事件处理器，在中央事件调度器中注册")])]),v._v(" "),_("h3",{attrs:{id:"container"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#container"}},[v._v("#")]),v._v(" Container")]),v._v(" "),_("ul",[_("li",[v._v("概念：Container 封装了节点上进程的相关资源，是 YARN 中资源的抽象")]),v._v(" "),_("li",[v._v("分类：运行 ApplicationMaster 的 Container 、运行应用任务的 Container")])]),v._v(" "),_("h2",{attrs:{id:"yarn-高可用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#yarn-高可用"}},[v._v("#")]),v._v(" YARN 高可用")]),v._v(" "),_("p",[v._v("ResourceManager 高可用")]),v._v(" "),_("ul",[_("li",[v._v("1 个 Active RM、多个 Standby RM")]),v._v(" "),_("li",[v._v("宕机后自动实现主备切换")]),v._v(" "),_("li",[v._v("ZooKeeper 的核心作用\n"),_("ul",[_("li",[v._v("Active 节点选举")]),v._v(" "),_("li",[v._v("恢复 Active RM 的原有状态信息")])])]),v._v(" "),_("li",[v._v("重启 AM，杀死所有运行中的 Container")]),v._v(" "),_("li",[v._v("切换方式：手动、自动")])]),v._v(" "),_("h2",{attrs:{id:"yarn-资源调度策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#yarn-资源调度策略"}},[v._v("#")]),v._v(" YARN 资源调度策略")]),v._v(" "),_("h3",{attrs:{id:"fifo-scheduler-先进先出调度器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#fifo-scheduler-先进先出调度器"}},[v._v("#")]),v._v(" FIFO Scheduler（先进先出调度器）")]),v._v(" "),_("p",[_("strong",[v._v("调度策略")])]),v._v(" "),_("p",[v._v("将所有任务放入一个队列，先进队列的先获得资源，排在后面的任务只有等待")]),v._v(" "),_("p",[_("strong",[v._v("缺点")])]),v._v(" "),_("ul",[_("li",[v._v("资源利用率低，无法交叉运行任务")]),v._v(" "),_("li",[v._v("灵活性差，如：紧急任务无法插队，耗时长的任务拖慢耗时短的任务")])]),v._v(" "),_("h3",{attrs:{id:"capacity-scheduler-容量调度器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#capacity-scheduler-容量调度器"}},[v._v("#")]),v._v(" Capacity Scheduler（容量调度器）")]),v._v(" "),_("p",[_("strong",[v._v("核心思想")]),v._v(" - 提前"),_("strong",[v._v("做预算")]),v._v("，在预算指导下分享集群资源。")]),v._v(" "),_("p",[_("strong",[v._v("调度策略")])]),v._v(" "),_("ul",[_("li",[v._v("集群资源由多个队列分享")]),v._v(" "),_("li",[v._v("每个队列都要预设资源分配的比例（提前做预算）")]),v._v(" "),_("li",[v._v("空闲资源优先分配给“实际资源/预算资源”比值最低的队列")]),v._v(" "),_("li",[v._v("队列内部采用 FIFO 调度策略")])]),v._v(" "),_("p",[_("strong",[v._v("特点")])]),v._v(" "),_("ul",[_("li",[v._v("层次化的队列设计：子队列可使用父队列资源")]),v._v(" "),_("li",[v._v("容量保证：每个队列都要预设资源占比，防止资源独占")]),v._v(" "),_("li",[v._v("弹性分配：空闲资源可以分配给任何队列，当多个队列争用时，会按比例进行平衡")]),v._v(" "),_("li",[v._v("支持动态管理：可以动态调整队列的容量、权限等参数，也可动态增加、暂停队列")]),v._v(" "),_("li",[v._v("访问控制：用户只能向自己的队列中提交任务，不能访问其他队列")]),v._v(" "),_("li",[v._v("多租户：多用户共享集群资源")])]),v._v(" "),_("h3",{attrs:{id:"fair-scheduler-公平调度器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#fair-scheduler-公平调度器"}},[v._v("#")]),v._v(" Fair Scheduler（公平调度器）")]),v._v(" "),_("p",[_("strong",[v._v("调度策略")])]),v._v(" "),_("ul",[_("li",[v._v("多队列公平共享集群资源")]),v._v(" "),_("li",[v._v("通过平分的方式，动态分配资源，无需预先设定资源分配比例")]),v._v(" "),_("li",[v._v("队列内部可配置调度策略：FIFO、Fair（默认）")])]),v._v(" "),_("p",[_("strong",[v._v("资源抢占")])]),v._v(" "),_("ul",[_("li",[v._v("终止其他队列的任务，使其让出所占资源，然后将资源分配给占用资源量少于最小资源量限制的队列")])]),v._v(" "),_("p",[_("strong",[v._v("队列权重")])]),v._v(" "),_("ul",[_("li",[v._v("当队列中有任务等待，并且集群中有空闲资源时，每个队列可以根据权重获得不同比例的空闲资源")])]),v._v(" "),_("h2",{attrs:{id:"资源"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#资源"}},[v._v("#")]),v._v(" 资源")])])}),[],!1,null,null,null);_.default=e.exports}}]);