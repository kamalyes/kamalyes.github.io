(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{444:function(n,s,a){"use strict";a.r(s);var t=a(7),e=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"javascript-闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-闭包"}},[n._v("#")]),n._v(" JavaScript 闭包")]),n._v(" "),s("h2",{attrs:{id:"javascript-利用闭包实现循环遍历加监听"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-利用闭包实现循环遍历加监听"}},[n._v("#")]),n._v(" JavaScript 利用闭包实现循环遍历加监听")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('<body>\n    <button>测试1</button>\n    <button>测试2</button>\n    <button>测试3</button>\n\x3c!--\n需求: 点击某个按钮, 提示"点击的是第n个按钮"\n--\x3e\n    <script type="text/javascript">\n        let btns = document.getElementsByTagName("button");\n\n        //遍历加监听\n\n        //   btns是一个伪数组，每一次都需要计算btns.length的值，所以直接按照以前的for循环去遍历，需要计算多次效率较低，\n        // 可以选择在for循环外面定义或者是在for循环的i < btns.length之前的 let i = 0; 修改为如下 let i = 0, length = btns.length ，这样的话只计算一次btns.length 的值\n        //   for (let i = 0, length = btns.length; i < length; i++) {\n        //     let btn = btns[i];\n        //   此时的点击事件会在for循环执行完了之后再执行，所以，如果使用 var 定义变量 i 的话，会导致点击事件中拿到的 i 永远都是 3 ，点击事件中在执行时弹出的提示永远都是第 4 个\n        //     btn.onclick = function () {\n        //       alert("第" + (i + 1) + "个");\n        //     };\n        //   }\n\n        //   for (let i = 0, length = btns.length; i < length; i++) {\n        //     let btn = btns[i];\n        //     //将btn所对应的下标保存在btn上，解决通过 var 定义变量 i 时，点击事件中拿到的 i 永远都为 3 的情况\n        //     btn.index = i;\n        //     btn.onclick = function () {\n        //       alert("第" + (this.index + 1) + "个");\n        //     };\n        //   }\n\n        //利用闭包实现\n\n        for (let i = 0, length = btns.length; i < length; i++) {\n        (function (j) {\n            let btn = btns[j];\n            // 此时的闭包永远不会消失，因为被按钮 btn 的 onclick 属性一直在引用着\n            btn.onclick = function () {\n            alert("第" + (j + 1) + "个");\n            };\n        })(i);\n        }\n    <\/script>\n</body>\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br")])]),s("h2",{attrs:{id:"javascript-闭包-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-闭包-2"}},[n._v("#")]),n._v(" JavaScript 闭包")]),n._v(" "),s("h3",{attrs:{id:"_1-如何产生闭包-closure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何产生闭包-closure"}},[n._v("#")]),n._v(" 1. 如何产生闭包(Closure)?")]),n._v(" "),s("ul",[s("li",[n._v("当一个嵌套的内部(子)函数引用了嵌套的外部(父)函数的变量(函数)时, 就产生了闭包")])]),n._v(" "),s("h3",{attrs:{id:"_2-闭包到底是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-闭包到底是什么"}},[n._v("#")]),n._v(" 2. 闭包到底是什么?")]),n._v(" "),s("ul",[s("li",[n._v("理解一: 闭包是嵌套的内部函数(绝大部分人)")]),n._v(" "),s("li",[n._v("理解二: 内部函数中包含被引用变量(函数)的对象(极少数人)，（闭包是一个对象，是保存在内部函数中的对象，这个对象中包含了被引用的变量(函数)）")]),n._v(" "),s("li",[n._v("注意: 可以使用 chrome 调试查看，闭包存在于嵌套的内部函数中")])]),n._v(" "),s("h3",{attrs:{id:"_3-产生闭包的条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-产生闭包的条件"}},[n._v("#")]),n._v(" 3. 产生闭包的条件?")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("函数嵌套")])]),n._v(" "),s("li",[s("p",[n._v("内部函数引用了外部函数的数据(变量/函数)")])]),n._v(" "),s("li",[s("p",[n._v("注意： 调用外部函数才会产生新的闭包")])])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('<script type="text/javascript">\n    function fn1() {\n    var a = 2;\n    var b = "abc";\n    var c = 123456;\n    function fn2() {\n        //函数定义就会产生闭包(不用调用内部函数)\n        console.log(a); //此函数并没有执行，只是定义了，定义函数后就会产生闭包\n    }\n    // fn2();\n    }\n    fn1();\n    //   console.log(c);  //Uncaught ReferenceError: c is not defined\n<\/script>\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("h3",{attrs:{id:"常见的闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的闭包"}},[n._v("#")]),n._v(" 常见的闭包")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("将函数作为另一个函数的返回值。")])]),n._v(" "),s("li",[s("p",[n._v("将函数作为实参传递给另一个函数调用。")])])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('<script type="text/javascript">\n    // 1. 将函数作为另一个函数的返回值\n\n    //   在整个过程中只产生了一个闭包，因为 fn2() 函数只创建了一次，\n    //   闭包创建了多少个只与外部函数执行多少次有关系(外部函数执行的时候才会创建内部函数)，和内部函数执行多少次没有关系\n    // 如果想要创建两个闭包，则需要创建两个 fn2() 函数，即再次执行一次 fn1() 函数 即可\n    function fn1() {\n    var a = 2;\n    function fn2() {\n        a++;\n        console.log(a);\n    }\n    return fn2;\n    }\n    var f = fn1();\n    f(); // 3\n    //   此时闭包并没有消失，所以 变量 a 此时是 3\n    f(); // 4\n<\/script>\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('<script type="text/javascript">\n// 2. 将函数作为实参传递给另一个函数调用\n      function showDelay(msg, time) {\n        setTimeout(function () {\n          alert(msg);\n        }, time);\n      }\n      showDelay("小胖", 2000);\n<\/script>\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("h2",{attrs:{id:"javascript-闭包的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-闭包的作用"}},[n._v("#")]),n._v(" JavaScript 闭包的作用")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("1.使用函数内部的变量在函数执行完后, 仍然存活在内存中(延长了局部变量的生命周期)")])]),n._v(" "),s("li",[s("p",[n._v("2.让函数外部可以操作(读写)到函数内部的数据(变量/函数)")])]),n._v(" "),s("li",[s("p",[n._v("常见问题:")]),n._v(" "),s("ul",[s("li",[n._v("1.函数执行完后, 函数内部声明的局部变量是否还存在?\n"),s("ul",[s("li",[n._v("一般是不存在, 存在于闭包中的变量才可能存在")])])]),n._v(" "),s("li",[n._v("2.在函数外部能直接访问函数内部的局部变量吗?\n"),s("ul",[s("li",[n._v("不能, 但我们可以通过闭包让外部操作它")])])])])])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('<script type="text/javascript">\n    function fn1() {\n    var a = 2;\n    function fn2() {\n        a++;\n        console.log(a);\n        // return a\n    }\n    function fn3() {\n        a--;\n        console.log(a);\n    }\n    return fn3;\n    }\n    var f = fn1();\n    f(); // 1\n    f(); // 0\n\n    //  此时的函数内部声明的存在于闭包中的变量 a 依旧存在，\n    //  闭包之中并不存在函数fn2()这个变量， 函数fn2()则因为没有被引用，所以fn2()函数已经被释放了，此时的fn2()这个函数对象成为了垃圾对象，会被回收。\n    //  闭包之中也不存在函数fn3()这个变量，在函数执行完之后fn3()这个变量会被释放，但是函数对象fn3()并没有成为垃圾对象,\n    //  因为在后面的语句中 var f = fn1() 的 f 在引用，f 指向fn3()这个函数对象,如果通过 fn1()语句来调用函数，则函数fn3()也会成为垃圾对象，也会被回收。\n\n<\/script>\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])]),s("h2",{attrs:{id:"javascript-闭包的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-闭包的生命周期"}},[n._v("#")]),n._v(" JavaScript 闭包的生命周期")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("1.产生: 在嵌套内部函数定义执行完时就产生了(不是在调用时)")])]),n._v(" "),s("li",[s("p",[n._v("2.死亡: 在嵌套的内部函数成为垃圾对象时")])])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('<script type="text/javascript">\n    function fn1() {\n    //此时闭包就已经产生了(函数提升, 内部函数对象已经创建了，)\n    var a = 2;\n    function fn2() {\n        a++;\n        console.log(a);\n    }\n    return fn2;\n    }\n    var f = fn1();\n    f(); // 3\n    f(); // 4\n    f = null; //闭包死亡(包含闭包的函数对象成为垃圾对象)\n<\/script>\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('<script type="text/javascript">\n    function fn1() {\n    var a = 2;\n    var fn2 =  function () {\n        a++;\n        console.log(a);\n    }\n    //此时在函数fn2()定义执行完以后，闭包才产生\n    return fn2;\n    }\n    var f = fn1();\n    f(); // 3\n    f(); // 4\n    f = null; //闭包死亡(包含闭包的函数对象成为垃圾对象)\n<\/script>\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("h2",{attrs:{id:"闭包的缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包的缺点"}},[n._v("#")]),n._v(" 闭包的缺点")]),n._v(" "),s("h3",{attrs:{id:"_1-缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-缺点"}},[n._v("#")]),n._v(" 1. 缺点")]),n._v(" "),s("ul",[s("li",[n._v("函数执行完后, 函数内的局部变量没有释放, 占用内存时间会变长")]),n._v(" "),s("li",[n._v("容易造成内存泄露")])]),n._v(" "),s("h3",{attrs:{id:"_2-解决方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决方式"}},[n._v("#")]),n._v(" 2. 解决方式")]),n._v(" "),s("ul",[s("li",[n._v("及时释放（调用外部函数的实例对象置为 null）")]),n._v(" "),s("li",[n._v("能不用闭包就不用")])]),n._v(" "),s("h2",{attrs:{id:"面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[n._v("#")]),n._v(" 面试题")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('<script>\n    var name = "The Window";\n\n    var object = {\n      name: "My Object",\n\n      getNameFunc: function () {\n        return function () {\n          console.log(this);\n          return this.name;\n        };\n      },\n    };\n    console.log(object.getNameFunc()());\n    // object.getNameFunc()的返回值是一个函数，而此时是直接执行了这个返回的函数（在全局作用域中调用的此函数，此时的全局上下文为window），所以此时是window来调用\n    // 此时是没有闭包的\n    /*\n    Window {window: Window, self: Window, document: document, name: "The Window", location: Location, …}\n    The Window\n    */\n<\/script>\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('<script>\n    var name = "The Window";\n\n    var object = {\n      name: "My Object",\n\n      getNameFunc: function () {\n        console.log("this====>", this);\n        var that = this;\n        return function () {\n          console.log(that);\n          console.log(this);\n          return that.name;\n        };\n      },\n    };\n    console.log(object.getNameFunc()());\n    //此时是有闭包的，这个闭包里的变量就是that ，此时的that为自己定义的这个object对象\n\n    /*\n    this====> {name: "My Object", getNameFunc: ƒ}\n    {name: "My Object", getNameFunc: ƒ}\n    Window {window: Window, self: Window, document: document, name: "The Window", location: Location, …}\n    My Object\n    */\n<\/script>\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('<script>\n    var name = "The Window";\n    var age = 66;\n\n    var object = {\n    name: "My Object",\n\n    getNameFunc: function () {\n        console.log("this====>", this);\n        var that = this;\n        return function () {\n        console.log(that);\n        console.log(this);\n        return that.age;\n        };\n    },\n    };\n    console.log(object.getNameFunc()());\n    //此时是有闭包的，这个闭包里的变量就是that ，此时的that为自己定义的这个object对象\n\n    /*\n    this====> {name: "My Object", getNameFunc: ƒ}\n    {name: "My Object", getNameFunc: ƒ}\n    Window {window: Window, self: Window, document: document, name: "The Window", location: Location, …}\n    undefined\n    */\n<\/script>\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br")])]),s("h3",{attrs:{id:"高难度面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高难度面试题"}},[n._v("#")]),n._v(" 高难度面试题")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('<script type="text/javascript">\n    function fun(n, t) {\n    console.log(t);\n    return {\n        fun: function (m) {\n        return fun(m, n);\n        // 此时的fun值得是调用的是外层的fun()函数，并不是return内部的fun方法\n        // 此时存在闭包，因为存在函数嵌套，内部函数引用了外部函数的变量 n\n        // 调用外部函数才会产生新的闭包\n        },\n    };\n    }\n    var a = fun(0); //此时调用的是是外层函数的fun函数，此时的闭包中的变量 n = 0\n    //此时调用的是内部的fun方法,此语句调用了内部函数，但在这个内部函数中执行了外层的函数，所以此时产生了新的闭包，但是此语句的返回值并没有被接收，\n    //   所以返回的对象并没有被引用，所以新产生的对象会被回收，所以新的闭包也就消失了，所以再次调用函数时依旧使用的还是 a 中的闭包。而闭包中的变量 n 依旧为0\n    a.fun(1);\n    a.fun(2);\n    a.fun(3);\n    //undefined,0,0,0\n    //在后面的这几次调用的时候使用的都是同一个闭包，闭包中的变量的值为 0\n\n    var b = fun(0).fun(1).fun(2).fun(3);\n    //undefined,0,1,2\n    //   此时产生的新的闭包并没有被回收，而是被下一个调用函数时引用了，所以闭包中的变量 n 使用的是新的闭包中的变量\n    //在后面的这几次调用的时候使用的都是同一个闭包，闭包中的变量的值为 0\n\n    var c = fun(0).fun(1);\n    //此时第一次调用后闭包中的变量 n 为 0,然后进行第二次调用fun(1),第二次调用后产生了新的闭包，导致 c 的闭包中的变量 n  为 1（第二次调用函数时输出的是第一次函数中生成的闭包中的变量 n ,而这个变量的值为 0 ）\n    c.fun(2);\n    c.fun(3);\n    //undefined,0,1,1\n    //在调用的时候，第二次调用的时候，闭包中的变量的值是0，所以输出结果为0，然后产生了新的闭包，\n    //   而后面在调用的时候虽然产生了新的闭包，但并没有接收新的返回值，即没有产生新的对象，所以新产生的闭包也就消失了，\n    //    所以后面再输出的时候闭包中的变量值为 1 ，所以输出的就是 1\n<\/script>\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);