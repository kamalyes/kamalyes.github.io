(window.webpackJsonp=window.webpackJsonp||[]).push([[473],{789:function(t,e,r){"use strict";r.r(e);var s=r(7),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"安装前置插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装前置插件"}},[t._v("#")]),t._v(" 安装前置插件")]),t._v(" "),e("p",[t._v("下载第一个："),e("a",{attrs:{href:"https://jmeter-plugins.org/downloads/old/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://jmeter-plugins.org/downloads/old/"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/download_jmeter_plugin.png",alt:""}})]),t._v(" "),e("p",[t._v("下载第二个："),e("a",{attrs:{href:"http://jmeter-plugins.org/get/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://jmeter-plugins.org/get/"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("把两个插件下载好之后，放在 JMeter 的安装目录 lib/ext 下，然后重启 JMeter。\n"),e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/install_jmeter_plugins_path.png",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"transactions-per-second-tps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transactions-per-second-tps"}},[t._v("#")]),t._v(" Transactions per Second（TPS）")]),t._v(" "),e("p",[t._v("即 TPS：每秒事务数，性能测试中，最重要的 2 个指标之一。该插件的作用是在测试脚本执行过程中，监控查看服务器的 TPS 表现————比如整体趋势、实时平均值走向、稳定性等。\n这个插件包含在 Basic Graphs 中，如下图\n"),e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/download_basic_graphs.png",alt:""}}),t._v("\n安装 Basic Graphs 后，一共有三个插件：\nransactions per Second：TPS 插件 Response Times Over Time：事务响应时间插件 Active Threads Over Time：每秒的活动线程数插件安装好后，重启 jmeter，从监视器中就可以看到这三个插件，如下图所示：\n"),e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/set_basic_graphs_entrance.png",alt:""}})]),t._v(" "),e("p",[t._v("1、TPS 变化展示图：\n"),e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/transactions_per_second.png",alt:""}})]),t._v(" "),e("p",[t._v("2、Response Times Over Time（事物响应时间）\n即 TRT：事务响应时间，性能测试中，最重要的两个指标的另外一个。该插件的主要作用是在测试脚本执行过程中，监控查看响应时间的实时平均值、整体响应时间走向等。\n"),e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/response_times_over_time.png",alt:""}})]),t._v(" "),e("p",[t._v("3、Active Threads Over Time（每秒活跃线程数）\n统计每秒活动的线程总数")]),t._v(" "),e("h3",{attrs:{id:"perfmon-metrics-collector"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#perfmon-metrics-collector"}},[t._v("#")]),t._v(" PerfMon Metrics Collector")]),t._v(" "),e("p",[t._v("即服务器性能监控数据采集器。在性能测试过程中，除了监控 TPS 和 TRT，还需要监控服务器的资源使用情况，比如 CPU、memory、I/O 等。该插件可以在性能测试中实时监控服务器的各项资源使用。\n在插件管理中安装 PerfMon\n"),e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/download_perfmon.png",alt:""}}),t._v("\n安装完成后重启 Jmeter，在监听器中可以看到该插件\n"),e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/perfmon_entrance.png",alt:""}}),t._v("\n还需下载一个服务端插件 ServerAgent，下载地址："),e("a",{attrs:{href:"https://github.com/undera/perfmon-agent",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/undera/perfmon-agent"),e("OutboundLink")],1),t._v("\n将下载好的 ServerAgent 上传到被测服务器，解压，进入目录，Windows 环境，双击 ServerAgent.bat 启动；linux 环境执 ServerAgent.sh 启动，默认使用 4444 端口。\n在 Jmeter 中启动 PerfMon Metrics Collector 插件，配置需要监听的项\n"),e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/perfmon_metrics_collector.png",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"csv-参数随机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#csv-参数随机"}},[t._v("#")]),t._v(" CSV 参数随机")]),t._v(" "),e("p",[t._v("默认的 CSV 文件取值是按照顺序从第一行开始取值的，需要随机取值，可安装扩张插件实现")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/add_csv_config_entrance.png",alt:""}}),t._v(" "),e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/csv_config_info.png",alt:""}})]),t._v(" "),e("p",[t._v("打开 jmeter，搜索并安装插件")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/download_random_csv_conifg_entrance.png",alt:""}}),t._v(" "),e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/download_jmeter_plugin_random_csv.png",alt:""}})]),t._v(" "),e("p",[t._v("线程组右键-添加-配置元件-bzm - Random CSV Data Set Config，选择后即可使用扩展插件")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/add_random_csv_conifg_entrance.png",alt:""}})]),t._v(" "),e("p",[t._v("接下来就是配置\n"),e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/set_random_csv_config.png",alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("参数说明：")])]),t._v(" "),e("ol",[e("li",[t._v("Filename（文件名）：文件的路径，直接选择文件的绝对路径就行，也可以写相对路径。")]),t._v(" "),e("li",[t._v("文件编码：读取文件的编码，默认选择 UTF-8 就行。")]),t._v(" "),e("li",[t._v("分隔符：默认逗号，在 txt 文件中，写两列的时候可以用逗号隔开。")]),t._v(" "),e("li",[t._v("变量名称：引用 csv 配置文件中的数据，指定变量名，意思是把 csv 的数据读出来，放在变量中，其它请求可以引用。")]),t._v(" "),e("li",[t._v("随机顺序：这个是这个插件的重点，选中则会随机读取 csv 中的数据，如果不选中则会顺序读取 csv 中的数据。")]),t._v(" "),e("li",[t._v("遇到文件结束符再次循环：勾选上循环完 csv 中的数据后，则会继续循环，一般都是要选中。")]),t._v(" "),e("li",[t._v("第一行是 csv 标题：如果 csv 文件中第一行是字段，那么勾选上则不会读取第一行的数据。")]),t._v(" "),e("li",[t._v("每个线程的独立列表：每个线程都通过他们自己去读取配置文件，当使用随机顺序（第 5 项），每个线程都将运行自己的随机序列，而不是所有线程都经过相同的变量顺序。")]),t._v(" "),e("li",[t._v("测试读取 csv 文件：在使用之前，可以先测试读取 csv 的值，看看是否正确。")])]),t._v(" "),e("h3",{attrs:{id:"stepping-thread-group"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stepping-thread-group"}},[t._v("#")]),t._v(" Stepping Thread Group")]),t._v(" "),e("ul",[e("li",[t._v("Stepping Thread Group 是第一个自定义线程组")]),t._v(" "),e("li",[t._v("但，随着版本的迭代，已经有更好的线程组代替 Stepping Thread Group 了【Concurrency Thread Group】，所以说 Stepping Thread Group 已经是过去式了")]),t._v(" "),e("li",[t._v("但，咱们还是要介绍下的滴")])]),t._v(" "),e("h3",{attrs:{id:"stepping-thread-group-的特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stepping-thread-group-的特性"}},[t._v("#")]),t._v(" Stepping Thread Group 的特性")]),t._v(" "),e("ul",[e("li",[t._v("有预览图显示估计的负载")]),t._v(" "),e("li",[t._v("可延迟启动线程组")]),t._v(" "),e("li",[t._v("可持续增加线程负载")]),t._v(" "),e("li",[t._v("可设置最大负载的持续运行时间")])]),t._v(" "),e("h3",{attrs:{id:"stepping-thread-group-的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stepping-thread-group-的作用"}},[t._v("#")]),t._v(" Stepping Thread Group 的作用")]),t._v(" "),e("ul",[e("li",[t._v("减少服务器的瞬时压力，做性能测试应该逐步增加压力，而不是瞬时加压")]),t._v(" "),e("li",[t._v("逐步增压越平缓越好，更容易从结果看到多少压力值下，有性能瓶颈")])]),t._v(" "),e("h3",{attrs:{id:"stepping-thread-group-参数详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stepping-thread-group-参数详解"}},[t._v("#")]),t._v(" Stepping Thread Group 参数详解")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/stepping_thread_group.png",alt:""}})]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("this group will start：")]),t._v(" 表示总共要启动的线程数；若设置为 100，表示总共会加载到 100 个线程")]),t._v(" "),e("li",[e("strong",[t._v("first，wait for：")]),t._v(" 从运行之后多长时间开始启动线程；若设置为 0 秒，表示运行之后立即启动线程")]),t._v(" "),e("li",[e("strong",[t._v("then start：")]),t._v(" 初次启动多少个线程；若设置为 0 个，表示初次不启动线程")]),t._v(" "),e("li",[e("strong",[t._v("next add：")]),t._v(" 之后每次启动多少个线程；若设置为 10 个，表示每个梯次启动 10 个线程")]),t._v(" "),e("li",[e("strong",[t._v("threads every：")]),t._v(" 当前运行多长时间后再次启动线程，即每一次线程启动完成之后的持续时间；若设置为 30 秒，每梯次启动完线程之后再运行 30 秒")]),t._v(" "),e("li",[e("strong",[t._v("using ramp-up：")]),t._v(" 启动线程的时间；若设置为 5 秒，表示每次启动线程都持续 5 秒（和基础线程组的 ramp-up 一样意思）")]),t._v(" "),e("li",[e("strong",[t._v("then hold load for：")]),t._v(" 线程全部启动完之后持续运行多长时间，如图：设置为 60 秒，表示 100  个线程全部启动完之后再持续运行 60 秒")]),t._v(" "),e("li",[e("strong",[t._v("finally，stop/threads every：")]),t._v(" 多长时间释放多少个线程；若设置为 5 个和 1 秒，表示持续负载结束之后每 1 秒钟释放 5 个线程")])]),t._v(" "),e("p",[t._v("从负载预览图，读懂所有参数")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/response_times_over_time.png",alt:""}})]),t._v(" "),e("ul",[e("li",[t._v("从第 0 秒开始启动线程，每 5 秒内启动 10 个线程并且运行 30 秒，以此循环，直到一共启动了 100 个线程")]),t._v(" "),e("li",[t._v("当已启动 100 个线程后，持续负载运行 60 秒")]),t._v(" "),e("li",[t._v("持续负载运行 60 秒后，每 1 秒释放五个线程，直到全部线程被释放**【注意：线程释放过程中，线程依然在运行】**")])]),t._v(" "),e("h3",{attrs:{id:"结合-active-threads-over-time"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结合-active-threads-over-time"}},[t._v("#")]),t._v(" 结合 Active Threads Over Time")]),t._v(" "),e("ul",[e("li",[t._v("运行 Stepping Thread Group 需要和 Active Threads Over Time 结合起来使用，这样能看到动态的阶梯加压效果")]),t._v(" "),e("li",[t._v("可以看到和 Stepping Thread Group 负载预览图基本一致，证明加压效果是正常的")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/col/jmeter/active_threads_over_time.png",alt:""}})])])}),[],!1,null,null,null);e.default=n.exports}}]);