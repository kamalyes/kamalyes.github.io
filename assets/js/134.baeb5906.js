(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{449:function(s,a,n){"use strict";n.r(a);var t=n(7),r=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"javascript-作用域与作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-作用域与作用域链"}},[s._v("#")]),s._v(" JavaScript 作用域与作用域链")]),s._v(" "),a("h2",{attrs:{id:"javascript-作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-作用域"}},[s._v("#")]),s._v(" JavaScript 作用域")]),s._v(" "),a("h3",{attrs:{id:"_1-理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-理解"}},[s._v("#")]),s._v(" 1. 理解")]),s._v(" "),a("ul",[a("li",[s._v('就是一块"地盘", 一个代码段所在的区域')]),s._v(" "),a("li",[s._v("它是静态的(相对于上下文对象), 在编写代码时就确定了")])]),s._v(" "),a("h3",{attrs:{id:"_2-分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-分类"}},[s._v("#")]),s._v(" 2. 分类")]),s._v(" "),a("ul",[a("li",[s._v("全局作用域")]),s._v(" "),a("li",[s._v("函数作用域")]),s._v(" "),a("li",[s._v("ES6 之前没有块作用域(ES6 中已经有块级作用域了)")])]),s._v(" "),a("h3",{attrs:{id:"_3-作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-作用"}},[s._v("#")]),s._v(" 3. 作用")]),s._v(" "),a("ul",[a("li",[s._v("隔离变量，不同作用域下同名变量不会有冲突")])]),s._v(" "),a("h2",{attrs:{id:"作用域与执行上下文对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域与执行上下文对比"}},[s._v("#")]),s._v(" 作用域与执行上下文对比")]),s._v(" "),a("h3",{attrs:{id:"_1-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-区别"}},[s._v("#")]),s._v(" 1. 区别")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了，而不是在函数调用时。")])]),s._v(" "),a("li",[a("p",[s._v("全局执行上下文环境是在全局作用域确定之后, js 代码马上执行之前创建。")])]),s._v(" "),a("li",[a("p",[s._v("函数执行上下文是在调用函数时, 函数体代码执行之前创建。")])]),s._v(" "),a("li",[a("p",[s._v("作用域是静态的, 只要函数定义好了就一直存在, 且不会再变化。")])]),s._v(" "),a("li",[a("p",[s._v("执行上下文是动态的, 调用函数时创建执行上下文, 函数调用结束时就会自动释放。")])])]),s._v(" "),a("h3",{attrs:{id:"_2-联系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-联系"}},[s._v("#")]),s._v(" 2. 联系")]),s._v(" "),a("ul",[a("li",[s._v("执行上下文(对象)是从属于所在的作用域")]),s._v(" "),a("li",[s._v("全局上下文环境==>全局作用域")]),s._v(" "),a("li",[s._v("函数上下文环境==>对应的函数使用域")])]),s._v(" "),a("h2",{attrs:{id:"javascript-作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-作用域链"}},[s._v("#")]),s._v(" JavaScript 作用域链")]),s._v(" "),a("h3",{attrs:{id:"_1-理解-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-理解-2"}},[s._v("#")]),s._v(" 1. 理解")]),s._v(" "),a("ul",[a("li",[s._v("多个上下级关系的作用域形成的链, 它的方向是从下向上的(从内到外)")]),s._v(" "),a("li",[s._v("查找变量时就是沿着作用域链来查找的")]),s._v(" "),a("li",[s._v("在函数定义的时候作用域链就已经确定了，和函数的调用没有关系")])]),s._v(" "),a("h3",{attrs:{id:"_2-查找一个变量的查找规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-查找一个变量的查找规则"}},[s._v("#")]),s._v(" 2. 查找一个变量的查找规则")]),s._v(" "),a("ul",[a("li",[s._v("1.在当前作用域下的执行上下文中查找对应的属性, 如果有直接返回, 否则进入 2")]),s._v(" "),a("li",[s._v("2.在上一级作用域的执行上下文中查找对应的属性, 如果有直接返回, 否则进入 3")]),s._v(" "),a("li",[s._v("3.再次执行 2 的相同操作, 直到全局作用域, 如果还找不到就抛出找不到的异常")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<script type="text/javascript">\n    var a = 1;\n    function fn1() {\n    var b = 2;\n    function fn2() {\n        var c = 3;\n        console.log(c);  //3\n        console.log(b); //2\n        console.log(a); //1\n        console.log(d); //Uncaught ReferenceError: d is not defined\n    }\n    fn2();\n    }\n    fn1();\n<\/script>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h2",{attrs:{id:"面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[s._v("#")]),s._v(" 面试题")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<script type="text/javascript">\n    var x = 10;\n    function fn() {\n      console.log(x);\n    }\n    function show(f) {\n      var x = 20;\n      f();\n    }\n    show(fn); //10\n    // 因为fn函数是一个单独的函数作用域，在这个函数作用域中找不到变量 x 的时候会沿着作用域链在全局作用域中去找。\n    // 在函数定义的时候作用域链就已经确定了，和函数的调用没有关系\n<\/script>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<script type="text/javascript">\n    var fn = function () {\n      // 注意，此时的 fn 不是字符串，而是函数 fn()\n      console.log(fn);\n    };\n    fn(); //ƒ () {console.log(fn);}\n\n    var obj = {\n      fn2: function () {\n        console.log(this);\n        console.log(this.fn2);\n\n        // 此时在函数fn2内部去找其是否存在fn2函数，而不是fn2 这一个属性，\n        // 此时在obj 对象内部的fn2为对象的属性，只是说这个属性的属性值是一个函数，结果找不到，然后就去全局中寻找,\n        // 而此时的全局作用域中没有定义 fn2()函数，所以找不到\n        console.log(fn2);\n      },\n    };\n    console.log(obj instanceof Object); //true\n    // obj.fn2(); //Uncaught ReferenceError: fn2 is not defined\n<\/script>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);