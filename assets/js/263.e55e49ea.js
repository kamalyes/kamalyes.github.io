(window.webpackJsonp=window.webpackJsonp||[]).push([[263],{581:function(e,t,s){"use strict";s.r(t);var a=s(7),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"javaweb-之-filter-和-listener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javaweb-之-filter-和-listener"}},[e._v("#")]),e._v(" JavaWeb 之 Filter 和 Listener")]),e._v(" "),t("p",[e._v("引入了 Servlet 规范后，你不需要关心 Socket 网络通信、不需要关心 HTTP 协议，也不需要关心你的业务类是如何被实例化和调用的，因为这些都被 Servlet 规范标准化了，你只要关心怎么实现的你的业务逻辑。这对于程序员来说是件好事，但也有不方便的一面。所谓规范就是说大家都要遵守，就会千篇一律，但是如果这个规范不能满足你的业务的个性化需求，就有问题了，因此设计一个规范或者一个中间件，要充分考虑到可扩展性。Servlet 规范提供了两种扩展机制："),t("strong",[e._v("Filter")]),e._v("和"),t("strong",[e._v("Listener")]),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[e._v("#")]),e._v(" Filter")]),e._v(" "),t("p",[t("strong",[e._v("Filter 是过滤器，这个接口允许你对请求和响应做一些统一的定制化处理")]),e._v("。")]),e._v(" "),t("p",[e._v("Filter 提供了过滤链（Filter Chain）的概念，一个过滤链包括多个 Filter。客户端请求 request 在抵达 Servlet 之前会经过过滤链的所有 Filter，服务器响应 response 从 Servlet 抵达客户端浏览器之前也会经过过滤链的所有 FIlter。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/snap/1559054413341.png",alt:"img"}})]),e._v(" "),t("h3",{attrs:{id:"过滤器方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#过滤器方法"}},[e._v("#")]),e._v(" 过滤器方法")]),e._v(" "),t("p",[e._v("Filter 接口有三个方法：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("init")]),e._v("：初始化 "),t("code",[e._v("Filter")])]),e._v(" "),t("li",[t("code",[e._v("destroy")]),e._v("：销毁 "),t("code",[e._v("Filter")])]),e._v(" "),t("li",[t("code",[e._v("doFilter")]),e._v("：将请求传给下个 "),t("code",[e._v("Filter")]),e._v(" 或 "),t("code",[e._v("Servlet")])])]),e._v(" "),t("p",[t("code",[e._v("init")]),e._v(" 和 "),t("code",[e._v("destroy")]),e._v(" 方法只会被调用一次；"),t("code",[e._v("doFilter")]),e._v(" 每次有客户端请求都会被调用一次。")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Filter")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n\t * web 程序启动时调用此方法, 用于初始化该 Filter\n\t * @param config\n\t *            可以从该参数中获取初始化参数以及ServletContext信息等\n\t * @throws ServletException\n\t */")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("init")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("FilterConfig")]),e._v(" config"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throws")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ServletException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n\t * 客户请求服务器时会经过\n\t *\n\t * @param request\n\t *            客户请求\n\t * @param response\n\t *            服务器响应\n\t * @param chain\n\t *            过滤链, 通过 chain.doFilter(request, response) 将请求传给下个 Filter 或\n\t *            Servlet\n\t * @throws ServletException\n\t * @throws IOException\n\t */")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("doFilter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ServletRequest")]),e._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ServletResponse")]),e._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("FilterChain")]),e._v(" chain"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throws")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ServletException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("IOException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n\t * web 程序关闭时调用此方法, 用于销毁一些资源\n\t */")]),e._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("destroy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br")])]),t("h3",{attrs:{id:"过滤器配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#过滤器配置"}},[e._v("#")]),e._v(" 过滤器配置")]),e._v(" "),t("p",[t("code",[e._v("Filter")]),e._v(" 需要配置在 "),t("code",[e._v("web.xml")]),e._v(" 中才能生效。一个 "),t("code",[e._v("Filter")]),e._v(" 需要配置 "),t("code",[e._v("<filter>")]),e._v(" 与 "),t("code",[e._v("<filter-mapping>")]),e._v(" 标签。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("<filter>")]),e._v(" 配置 Filter 名称，实现类以及初始化参数。")]),e._v(" "),t("li",[t("code",[e._v("<filter-mapping>")]),e._v(" 配置什么规则下使用该 Filter。")]),e._v(" "),t("li",[t("code",[e._v("<filter>")]),e._v(" 的 filterName 与 "),t("code",[e._v("<filter-mapping>")]),e._v(" 的 filterName 必须匹配。")]),e._v(" "),t("li",[t("code",[e._v("<url-pattern>")]),e._v(" 配置 URL 的规则，可以配置多个，可以使用通配符（"),t("code",[e._v("*")]),e._v("）。")]),e._v(" "),t("li",[t("code",[e._v("<dispatcher>")]),e._v(" 配置到达 Servlet 的方式，有 4 种取值：REQUEST、FORWARD、INCLUDE、ERROR。可以同时配置多个 "),t("code",[e._v("<dispatcher>")]),e._v("。如果没有配置任何 "),t("code",[e._v("<dispatcher>")]),e._v("，默认为 REQUEST。\n"),t("ul",[t("li",[e._v("REQUEST - 表示仅当直接请求 Servlet 时才生效。")]),e._v(" "),t("li",[e._v("FORWARD - 表示仅当某 Servlet 通过 FORWARD 到该 Servlet 时才生效。")]),e._v(" "),t("li",[e._v("INCLUDE - JSP 中可以通过 "),t("code",[e._v("<jsp:include>")]),e._v(" 请求某 Servlet。仅在这种情况表有效。")]),e._v(" "),t("li",[e._v("ERROR - JSP 中可以通过 "),t("code",[e._v('<%@ page errorPage="error.jsp" %>')]),e._v(" 指定错误处理页面。仅在这种情况表有效。")])])])]),e._v(" "),t("h2",{attrs:{id:"listener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#listener"}},[e._v("#")]),e._v(" Listener")]),e._v(" "),t("p",[e._v("监听器（"),t("code",[e._v("Listener")]),e._v("）用于监听 web 应用程序中的"),t("code",[e._v("ServletContext")]),e._v(", "),t("code",[e._v("HttpSession")]),e._v("和 "),t("code",[e._v("ServletRequest")]),e._v("等域对象的创建与销毁事件，以及监听这些域对象中的属性发生修改的事件。")]),e._v(" "),t("p",[e._v("使用 "),t("code",[e._v("Listener")]),e._v(" 不需要关注该类事件时怎样触发或者怎么调用相应的 "),t("code",[e._v("Listener")]),e._v("，只要记住该类事件触发时一定会调用相应的 "),t("code",[e._v("Listener")]),e._v("，遵循 Servlet 规范的服务器会自动完成相应工作。")]),e._v(" "),t("h3",{attrs:{id:"监听器的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#监听器的分类"}},[e._v("#")]),e._v(" 监听器的分类")]),e._v(" "),t("p",[e._v("在 Servlet 规范中定义了多种类型的监听器，它们用于监听的事件源分别为"),t("code",[e._v("ServletContext")]),e._v("，"),t("code",[e._v("HttpSession")]),e._v("和"),t("code",[e._v("ServletRequest")]),e._v("这三个域对象\nServlet 规范针对这三个对象上的操作，又把多种类型的监听器划分为三种类型：")]),e._v(" "),t("ol",[t("li",[e._v("监听域对象自身的创建和销毁的事件监听器。")]),e._v(" "),t("li",[e._v("监听域对象中的属性的增加和删除的事件监听器。")]),e._v(" "),t("li",[e._v("监听绑定到 HttpSession 域中的某个对象的状态的事件监听器。")])]),e._v(" "),t("h3",{attrs:{id:"监听对象的创建和销毁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#监听对象的创建和销毁"}},[e._v("#")]),e._v(" 监听对象的创建和销毁")]),e._v(" "),t("h4",{attrs:{id:"httpsessionlistener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#httpsessionlistener"}},[e._v("#")]),e._v(" HttpSessionListener")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("HttpSessionListener")]),e._v(" 接口用于监听 "),t("code",[e._v("HttpSession")]),e._v(" 对象的创建和销毁。")])]),e._v(" "),t("ul",[t("li",[e._v("创建一个 "),t("code",[e._v("Session")]),e._v(" 时，激发 "),t("code",[e._v("sessionCreated (HttpSessionEvent se)")]),e._v(" 方法")]),e._v(" "),t("li",[e._v("销毁一个 "),t("code",[e._v("Session")]),e._v(" 时，激发 "),t("code",[e._v("sessionDestroyed (HttpSessionEvent se)")]),e._v(" 方法。")])]),e._v(" "),t("h4",{attrs:{id:"servletcontextlistener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servletcontextlistener"}},[e._v("#")]),e._v(" ServletContextListener")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("ServletContextListener")]),e._v(" 接口用于监听 "),t("code",[e._v("ServletContext")]),e._v(" 对象的创建和销毁事件。")])]),e._v(" "),t("p",[e._v("实现了 "),t("code",[e._v("ServletContextListener")]),e._v(" 接口的类都可以对 "),t("code",[e._v("ServletContext")]),e._v(" 对象的创建和销毁进行监听。")]),e._v(" "),t("ul",[t("li",[e._v("当 "),t("code",[e._v("ServletContext")]),e._v(" 对象被创建时，激发 "),t("code",[e._v("contextInitialized (ServletContextEvent sce)")]),e._v(" 方法。")]),e._v(" "),t("li",[e._v("当 "),t("code",[e._v("ServletContext")]),e._v(" 对象被销毁时，激发 "),t("code",[e._v("contextDestroyed(ServletContextEvent sce)")]),e._v(" 方法。")])]),e._v(" "),t("p",[t("code",[e._v("ServletContext")]),e._v(" 域对象创建和销毁时机：")]),e._v(" "),t("ul",[t("li",[e._v("创建：服务器启动针对每一个 Web 应用创建 "),t("code",[e._v("ServletContext")])]),e._v(" "),t("li",[e._v("销毁：服务器关闭前先关闭代表每一个 web 应用的 "),t("code",[e._v("ServletContext")])])]),e._v(" "),t("h4",{attrs:{id:"servletrequestlistener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servletrequestlistener"}},[e._v("#")]),e._v(" ServletRequestListener")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("ServletRequestListener")]),e._v(" 接口用于监听 "),t("code",[e._v("ServletRequest")]),e._v(" 对象的创建和销毁。")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Request")]),e._v(" 对象被创建时，监听器的 "),t("code",[e._v("requestInitialized(ServletRequestEvent sre)")]),e._v(" 方法将会被调用")]),e._v(" "),t("li",[t("code",[e._v("Request")]),e._v(" 对象被销毁时，监听器的 "),t("code",[e._v("requestDestroyed(ServletRequestEvent sre)")]),e._v(" 方法将会被调用")])]),e._v(" "),t("p",[t("code",[e._v("ServletRequest")]),e._v(" 域对象创建和销毁时机：")]),e._v(" "),t("ul",[t("li",[e._v("创建：用户每一次访问都会创建 request 对象")]),e._v(" "),t("li",[e._v("销毁：当前访问结束，request 对象就会销毁")])]),e._v(" "),t("h3",{attrs:{id:"监听对象的属性变化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#监听对象的属性变化"}},[e._v("#")]),e._v(" 监听对象的属性变化")]),e._v(" "),t("p",[e._v("域对象中属性的变更的事件监听器就是用来监听 "),t("code",[e._v("ServletContext")]),e._v("、"),t("code",[e._v("HttpSession")]),e._v("、"),t("code",[e._v("HttpServletRequest")]),e._v(" 这三个对象中的属性变更信息事件的监听器。\n这三个监听器接口分别是 "),t("code",[e._v("ServletContextAttributeListener")]),e._v("、"),t("code",[e._v("HttpSessionAttributeListener")]),e._v(" "),t("code",[e._v("和 ServletRequestAttributeListener")]),e._v("，这三个接口中都定义了三个方法来处理被监听对象中的属性的增加，删除和替换的事件，同一个事件在这三个接口中对应的方法名称完全相同，只是接受的参数类型不同。")]),e._v(" "),t("h4",{attrs:{id:"attributeadded-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#attributeadded-方法"}},[e._v("#")]),e._v(" attributeAdded 方法")]),e._v(" "),t("p",[e._v("当向被监听对象中增加一个属性时，web 容器就调用事件监听器的 "),t("code",[e._v("attributeAdded")]),e._v(" 方法进行响应，这个方法接收一个事件类型的参数，监听器可以通过这个参数来获得正在增加属性的域对象和被保存到域中的属性对象\n各个域属性监听器中的完整语法定义为：")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("attributeAdded")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ServletContextAttributeEvent")]),e._v(" scae"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("attributeReplaced")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HttpSessionBindingEvent")]),e._v(" hsbe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("attributeRmoved")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ServletRequestAttributeEvent")]),e._v(" srae"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("h4",{attrs:{id:"attributeremoved-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#attributeremoved-方法"}},[e._v("#")]),e._v(" attributeRemoved 方法")]),e._v(" "),t("p",[e._v("当删除被监听对象中的一个属性时，web 容器调用事件监听器的 "),t("code",[e._v("attributeRemoved")]),e._v(" 方法进行响应\n各个域属性监听器中的完整语法定义为：")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("attributeRemoved")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ServletContextAttributeEvent")]),e._v(" scae"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("attributeRemoved")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HttpSessionBindingEvent")]),e._v(" hsbe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("attributeRemoved")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ServletRequestAttributeEvent")]),e._v(" srae"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("h4",{attrs:{id:"attributereplaced-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#attributereplaced-方法"}},[e._v("#")]),e._v(" attributeReplaced 方法")]),e._v(" "),t("p",[e._v("当监听器的域对象中的某个属性被替换时，web 容器调用事件监听器的 "),t("code",[e._v("attributeReplaced")]),e._v(" 方法进行响应\n各个域属性监听器中的完整语法定义为：")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("attributeReplaced")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ServletContextAttributeEvent")]),e._v(" scae"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("attributeReplaced")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HttpSessionBindingEvent")]),e._v(" hsbe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("attributeReplaced")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ServletRequestAttributeEvent")]),e._v(" srae"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("h3",{attrs:{id:"监听-session-内的对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#监听-session-内的对象"}},[e._v("#")]),e._v(" 监听 Session 内的对象")]),e._v(" "),t("p",[e._v("保存在 Session 域中的对象可以有多种状态：")]),e._v(" "),t("ul",[t("li",[e._v("绑定（"),t("code",[e._v('session.setAttribute("bean",Object)')]),e._v("）到 "),t("code",[e._v("Session")]),e._v(" 中；")]),e._v(" "),t("li",[e._v("从 "),t("code",[e._v("Session")]),e._v(" 域中解除绑定（"),t("code",[e._v('session.removeAttribute("bean")')]),e._v("）；")]),e._v(" "),t("li",[e._v("随 "),t("code",[e._v("Session")]),e._v(" 对象持久化到一个存储设备中；")]),e._v(" "),t("li",[e._v("随 "),t("code",[e._v("Session")]),e._v(" 对象从一个存储设备中恢复。")])]),e._v(" "),t("p",[e._v("Servlet 规范中定义了两个特殊的监听器接口 "),t("code",[e._v("HttpSessionBindingListener")]),e._v(" 和"),t("code",[e._v("HttpSessionActivationListener")]),e._v(" 来帮助 JavaBean 对象了解自己在 Session 域中的这些状态。")]),e._v(" "),t("p",[e._v("实现这两个接口的类不需要 "),t("code",[e._v("web.xml")]),e._v(" 文件中进行注册。")]),e._v(" "),t("h4",{attrs:{id:"httpsessionbindinglistener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#httpsessionbindinglistener"}},[e._v("#")]),e._v(" HttpSessionBindingListener")]),e._v(" "),t("p",[t("code",[e._v("HttpSessionBindingListener")]),e._v(" 接口的 JavaBean 对象可以感知自己被绑定或解绑定到 "),t("code",[e._v("Session")]),e._v(" 中的事件。")]),e._v(" "),t("ul",[t("li",[e._v("当对象被绑定到 "),t("code",[e._v("HttpSession")]),e._v(" 对象中时，web 服务器调用该对象的 "),t("code",[e._v("valueBound(HttpSessionBindingEvent event)")]),e._v(" 方法。")]),e._v(" "),t("li",[e._v("当对象从 "),t("code",[e._v("HttpSession")]),e._v(" 对象中解除绑定时，web 服务器调用该对象的 "),t("code",[e._v("valueUnbound(HttpSessionBindingEvent event)")]),e._v(" 方法。")])]),e._v(" "),t("h4",{attrs:{id:"httpsessionactivationlistener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#httpsessionactivationlistener"}},[e._v("#")]),e._v(" HttpSessionActivationListener")]),e._v(" "),t("p",[e._v("实现了 "),t("code",[e._v("HttpSessionActivationListener")]),e._v(" 接口的 JavaBean 对象可以感知自己被活化(反序列化)和钝化(序列化)的事件。")]),e._v(" "),t("ul",[t("li",[e._v("当绑定到 "),t("code",[e._v("HttpSession")]),e._v(" 对象中的 JavaBean 对象将要随 "),t("code",[e._v("HttpSession")]),e._v(" 对象被序列化之前，web 服务器调用该 JavaBean 对象的 "),t("code",[e._v("sessionWillPassivate(HttpSessionEvent event)")]),e._v(" 方法。这样 JavaBean 对象就可以知道自己将要和 "),t("code",[e._v("HttpSession")]),e._v(" 对象一起被序列化到硬盘中.")]),e._v(" "),t("li",[e._v("当绑定到 "),t("code",[e._v("HttpSession")]),e._v(" 对象中的 JavaBean 对象将要随 "),t("code",[e._v("HttpSession")]),e._v(" 对象被反序列化之后，web 服务器调用该 JavaBean 对象的 "),t("code",[e._v("sessionDidActive(HttpSessionEvent event)")]),e._v(" 方法。这样 JavaBean 对象就可以知道自己将要和 "),t("code",[e._v("HttpSession")]),e._v(" 对象一起被反序列化回到内存中")])]),e._v(" "),t("h2",{attrs:{id:"filter-和-listener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filter-和-listener"}},[e._v("#")]),e._v(" Filter 和 Listener")]),e._v(" "),t("p",[e._v("Filter 和 Listener 的本质区别：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Filter 是干预过程的")]),e._v("，它是过程的一部分，是基于过程行为的。")]),e._v(" "),t("li",[t("strong",[e._v("Listener 是基于状态的")]),e._v("，任何行为改变同一个状态，触发的事件是一致的。")])]),e._v(" "),t("h2",{attrs:{id:"示例代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例代码"}},[e._v("#")]),e._v(" 示例代码")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Filter")]),e._v(" 的示例源码："),t("a",{attrs:{href:"https://github.com/kamalyes/javatech/tree/master/codes/javaee-tutorial/javaee-tutorial-filter",target:"_blank",rel:"noopener noreferrer"}},[e._v("源码"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("code",[e._v("Listener")]),e._v(" 的示例源码："),t("a",{attrs:{href:"https://github.com/kamalyes/javatech/tree/master/codes/javaee-tutorial/javaee-tutorial-listener",target:"_blank",rel:"noopener noreferrer"}},[e._v("源码"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/intro/100027701",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入拆解 Tomcat & Jetty"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://book.douban.com/subject/4189495/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java Web 整合开发王者归来"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);