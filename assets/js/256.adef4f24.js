(window.webpackJsonp=window.webpackJsonp||[]).push([[256],{571:function(s,a,t){"use strict";t.r(a);var e=t(7),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"java-故障诊断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-故障诊断"}},[s._v("#")]),s._v(" Java 故障诊断")]),s._v(" "),a("h2",{attrs:{id:"故障定位思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#故障定位思路"}},[s._v("#")]),s._v(" 故障定位思路")]),s._v(" "),a("p",[s._v("Java 应用出现线上故障，如何进行诊断？")]),s._v(" "),a("p",[s._v("我们在定位线上问题时要有一个整体的思路，顺藤摸瓜，才能较快的找到问题原因。")]),s._v(" "),a("p",[s._v("一般来说，服务器故障诊断的整体思路如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/snap/20200309181645.png",alt:"img"}})]),s._v(" "),a("p",[s._v("应用故障诊断思路：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://www.yuyanqing.cn/oss/image-bed/snap/20200309181831.png",alt:"img"}})]),s._v(" "),a("h2",{attrs:{id:"cpu-问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu-问题"}},[s._v("#")]),s._v(" CPU 问题")]),s._v(" "),a("p",[s._v("一、"),a("strong",[s._v("CPU 使用率过高")]),s._v("：往往是由于程序逻辑问题导致的。常见导致 CPU 飙升的问题场景如：死循环，无限递归、频繁 GC、线程上下文切换过多。")]),s._v(" "),a("p",[s._v("二、"),a("strong",[s._v("CPU 始终升不上去")]),s._v("：往往是由于程序中存在大量 IO 操作并且时间很长（数据库读写、日志等）。")]),s._v(" "),a("h3",{attrs:{id:"查找-cpu-占用率较高的进程、线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找-cpu-占用率较高的进程、线程"}},[s._v("#")]),s._v(" 查找 CPU 占用率较高的进程、线程")]),s._v(" "),a("p",[s._v("线上环境的 Java 应用可能有多个进程、线程，所以，要先找到 CPU 占用率较高的进程、线程。")]),s._v(" "),a("p",[s._v("（1）使用 "),a("code",[s._v("ps")]),s._v(" 命令查看 xxx 应用的进程 ID（PID）")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" xxx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("也可以使用 "),a("code",[s._v("jps")]),s._v(" 命令来查看。")]),s._v(" "),a("p",[s._v("（2）如果应用有多个进程，可以用 "),a("code",[s._v("top")]),s._v(" 命令查看哪个占用 CPU 较高。")]),s._v(" "),a("p",[s._v("（3）用 "),a("code",[s._v("top -Hp pid")]),s._v(" 来找到 CPU 使用率比较高的一些线程。")]),s._v(" "),a("p",[s._v("（4）将占用 CPU 最高的 PID 转换为 16 进制，使用 "),a("code",[s._v("printf '%x\\n' pid")]),s._v(" 得到 "),a("code",[s._v("nid")])]),s._v(" "),a("p",[s._v("（5）使用 "),a("code",[s._v("jstack pic | grep 'nid' -C5")]),s._v(" 命令，查看堆栈信息：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ jstack "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7129")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0x1c23'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-C5")]),s._v("\n        at java.lang.Object.wait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Object.java:502"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at java.lang.ref.Reference.tryHandlePending"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Reference.java:191"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        - locked "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("0x00000000b5383ff"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a java.lang.ref.Reference"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at java.lang.ref.Reference"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ReferenceHandler")]),s._v(".run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Reference.java:153"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"main"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#1 prio=5 os_prio=0 tid=0x00007f4df400a800 nid=0x1c23 in Object.wait() [0x00007f4dfdec8000]")]),s._v("\n   java.lang.Thread.State: WAITING "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("on object monitor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at java.lang.Object.wait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Native Method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        - waiting on "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("0x00000000b538401"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("8")]),s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a org.apache.felix.framework.util.ThreadGate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        at org.apache.felix.framework.util.ThreadGate.await"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ThreadGate.java:79"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        - locked "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("0x00000000b538401"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("8")]),s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a org.apache.felix.framework.util.ThreadGate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("（6）更常见的操作是用 "),a("code",[s._v("jstack")]),s._v(" 生成堆栈快照，然后基于快照文件进行分析。生成快照命令：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("jstack "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-F")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v(" pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" threaddump.log\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("（7）分析堆栈信息")]),s._v(" "),a("p",[s._v("一般来说，状态为 "),a("code",[s._v("WAITING")]),s._v("、"),a("code",[s._v("TIMED_WAITING")]),s._v(" 、"),a("code",[s._v("BLOCKED")]),s._v(" 的线程更可能出现问题。可以执行以下命令查看线程状态统计：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('cat threaddump.log | grep "java.lang.Thread.State" | sort -nr | uniq -c\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果存在大量 "),a("code",[s._v("WAITING")]),s._v("、"),a("code",[s._v("TIMED_WAITING")]),s._v(" 、"),a("code",[s._v("BLOCKED")]),s._v(" ，那么多半是有问题啦。")]),s._v(" "),a("h3",{attrs:{id:"是否存在频繁-gc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否存在频繁-gc"}},[s._v("#")]),s._v(" 是否存在频繁 GC")]),s._v(" "),a("p",[s._v("如果应用频繁 GC，也可能导致 CPU 飙升。为何频繁 GC 可以使用 "),a("code",[s._v("jstack")]),s._v(" 来分析问题（分析和解决频繁 GC 问题，在后续讲解）。")]),s._v(" "),a("p",[s._v("那么，如何判断 Java 进程 GC 是否频繁？")]),s._v(" "),a("p",[s._v("可以使用 "),a("code",[s._v("jstat -gc pid 1000")]),s._v(" 命令来观察 GC 状态。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ jstat "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-gc")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29527")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22528.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22016.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21388.2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4106752.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("921244.7")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5592576.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2086826.5")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("110716.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("103441.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12416.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11167.7")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3189")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90.057")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.140")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("92.197")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22528.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22016.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21388.2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4106752.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("921244.7")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5592576.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2086826.5")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("110716.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("103441.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12416.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11167.7")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3189")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90.057")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.140")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("92.197")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22528.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22016.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21388.2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4106752.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("921244.7")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5592576.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2086826.5")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("110716.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("103441.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12416.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11167.7")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3189")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90.057")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.140")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("92.197")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22528.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22016.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21388.2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4106752.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("921244.7")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5592576.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2086826.5")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("110716.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("103441.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12416.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11167.7")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3189")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90.057")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.140")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("92.197")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22528.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22016.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21388.2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4106752.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("921244.7")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5592576.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2086826.5")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("110716.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("103441.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12416.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11167.7")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3189")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90.057")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.140")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("92.197")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"是否存在频繁上下文切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否存在频繁上下文切换"}},[s._v("#")]),s._v(" 是否存在频繁上下文切换")]),s._v(" "),a("p",[s._v("针对频繁上下文切换问题，可以使用 "),a("code",[s._v("vmstat pid")]),s._v(" 命令来进行查看。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vmstat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7129")]),s._v("\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("   buff  cache   si   so    bi    bo   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   cs us sy "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" wa st\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6836")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("737532")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1588")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3504956")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("其中，"),a("code",[s._v("cs")]),s._v(" 一列代表了上下文切换的次数。")]),s._v(" "),a("p",[s._v("【解决方法】")]),s._v(" "),a("p",[s._v("如果，线程上下文切换很频繁，可以考虑在应用中针对线程进行优化，方法有：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("无锁并发")]),s._v("：多线程竞争时，会引起上下文切换，所以多线程处理数据时，可以用一些办法来避免使用锁，如将数据的 ID 按照 Hash 取模分段，不同的线程处理不同段的数据；")]),s._v(" "),a("li",[a("strong",[s._v("CAS 算法")]),s._v("：Java 的 Atomic 包使用 CAS 算法来更新数据，而不需要加锁；")]),s._v(" "),a("li",[a("strong",[s._v("最少线程")]),s._v("：避免创建不需要的线程，比如任务很少，但是创建了很多线程来处理，这样会造成大量线程都处于等待状态；")]),s._v(" "),a("li",[a("strong",[s._v("使用协程")]),s._v("：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换；")])]),s._v(" "),a("h2",{attrs:{id:"内存问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存问题"}},[s._v("#")]),s._v(" 内存问题")]),s._v(" "),a("p",[s._v("内存问题诊断起来相对比 CPU 麻烦一些，场景也比较多。主要包括 OOM、GC 问题和堆外内存。一般来讲，我们会先用 "),a("code",[s._v("free")]),s._v(" 命令先来检查一发内存的各种情况。")]),s._v(" "),a("p",[s._v("诊断内存问题，一般首先会用 "),a("code",[s._v("free")]),s._v(" 命令查看一下机器的物理内存使用情况。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("\n              total        used        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("      shared  buff/cache   available\nMem:        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8011164")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3767900")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("735364")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8804")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3507900")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3898568")]),s._v("\nSwap:       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5242876")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6836")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5236040")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"磁盘问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#磁盘问题"}},[s._v("#")]),s._v(" 磁盘问题")]),s._v(" "),a("h3",{attrs:{id:"查看磁盘空间使用率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看磁盘空间使用率"}},[s._v("#")]),s._v(" 查看磁盘空间使用率")]),s._v(" "),a("p",[s._v("可以使用 "),a("code",[s._v("df -hl")]),s._v(" 命令查看磁盘空间使用率。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ df -hl\nFilesystem      Size  Used Avail Use% Mounted on\ndevtmpfs        494M     0  494M   0% /dev\ntmpfs           504M     0  504M   0% /dev/shm\ntmpfs           504M   58M  447M  12% /run\ntmpfs           504M     0  504M   0% /sys/fs/cgroup\n/dev/sda2        20G  5.7G   13G  31% /\n/dev/sda1       380M  142M  218M  40% /boot\ntmpfs           101M     0  101M   0% /run/user/0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"查看磁盘读写性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看磁盘读写性能"}},[s._v("#")]),s._v(" 查看磁盘读写性能")]),s._v(" "),a("p",[s._v("可以使用 "),a("code",[s._v("iostat")]),s._v(" 命令查看磁盘读写性能。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("iostat -d -k -x\nLinux 3.10.0-327.el7.x86_64 (elk-server)        03/07/2020      _x86_64_        (4 CPU)\n\nDevice:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util\nsda               0.00     0.14    0.01    1.63     0.42   157.56   193.02     0.00    2.52   11.43    2.48   0.60   0.10\nscd0              0.00     0.00    0.00    0.00     0.00     0.00     8.00     0.00    0.27    0.27    0.00   0.27   0.00\ndm-0              0.00     0.00    0.01    1.78     0.41   157.56   177.19     0.00    2.46   12.09    2.42   0.59   0.10\ndm-1              0.00     0.00    0.00    0.00     0.00     0.00    16.95     0.00    1.04    1.04    0.00   1.02   0.00\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"查看具体的文件读写情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看具体的文件读写情况"}},[s._v("#")]),s._v(" 查看具体的文件读写情况")]),s._v(" "),a("p",[s._v("可以使用 "),a("code",[s._v("lsof -p pid")]),s._v(" 命令")]),s._v(" "),a("h2",{attrs:{id:"网络问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络问题"}},[s._v("#")]),s._v(" 网络问题")]),s._v(" "),a("h3",{attrs:{id:"无法连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无法连接"}},[s._v("#")]),s._v(" 无法连接")]),s._v(" "),a("p",[s._v("可以通过 "),a("code",[s._v("ping")]),s._v(" 命令，查看是否能连通。")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("netstat -nlp | grep <port>")]),s._v(" 命令，查看服务端口是否在工作。")]),s._v(" "),a("h3",{attrs:{id:"网络超时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络超时"}},[s._v("#")]),s._v(" 网络超时")]),s._v(" "),a("p",[s._v("网络超时问题大部分出在应用层面。超时大体可以分为连接超时和读写超时，某些使用连接池的客户端框架还会存在获取连接超时和空闲连接清理超时。")]),s._v(" "),a("ul",[a("li",[s._v("读写超时。readTimeout/writeTimeout，有些框架叫做 so_timeout 或者 socketTimeout，均指的是数据读写超时。注意这边的超时大部分是指逻辑上的超时。soa 的超时指的也是读超时。读写超时一般都只针对客户端设置。")]),s._v(" "),a("li",[s._v("连接超时。connectionTimeout，客户端通常指与服务端建立连接的最大时间。服务端这边 connectionTimeout 就有些五花八门了，jetty 中表示空闲连接清理时间，tomcat 则表示连接维持的最大时间。")]),s._v(" "),a("li",[s._v("其他。包括连接获取超时 connectionAcquireTimeout 和空闲连接清理超时 idleConnectionTimeout。多用于使用连接池或队列的客户端或服务端框架。")])]),s._v(" "),a("p",[s._v("我们在设置各种超时时间中，需要确认的是尽量保持客户端的超时小于服务端的超时，以保证连接正常结束。")]),s._v(" "),a("p",[s._v("在实际开发中，我们关心最多的应该是接口的读写超时了。")]),s._v(" "),a("p",[s._v("如何设置合理的接口超时是一个问题。如果接口超时设置的过长，那么有可能会过多地占用服务端的 tcp 连接。而如果接口设置的过短，那么接口超时就会非常频繁。")]),s._v(" "),a("p",[s._v("服务端接口明明 rt 降低，但客户端仍然一直超时又是另一个问题。这个问题其实很简单，客户端到服务端的链路包括网络传输、排队以及服务处理等，每一个环节都可能是耗时的原因。")]),s._v(" "),a("h3",{attrs:{id:"tcp-队列溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-队列溢出"}},[s._v("#")]),s._v(" TCP 队列溢出")]),s._v(" "),a("p",[s._v("tcp 队列溢出是个相对底层的错误，它可能会造成超时、rst 等更表层的错误。因此错误也更隐蔽，所以我们单独说一说。\n"),a("img",{attrs:{src:"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083827.jpg",alt:"img"}})]),s._v(" "),a("p",[s._v("如上图所示，这里有两个队列：syns queue(半连接队列）、accept queue（全连接队列）。三次握手，在 server 收到 client 的 syn 后，把消息放到 syns queue，回复 syn+ack 给 client，server 收到 client 的 ack，如果这时 accept queue 没满，那就从 syns queue 拿出暂存的信息放入 accept queue 中，否则按 tcp_abort_on_overflow 指示的执行。")]),s._v(" "),a("p",[s._v("tcp_abort_on_overflow 0 表示如果三次握手第三步的时候 accept queue 满了那么 server 扔掉 client 发过来的 ack。tcp_abort_on_overflow 1 则表示第三步的时候如果全连接队列满了，server 发送一个 rst 包给 client，表示废掉这个握手过程和这个连接，意味着日志里可能会有很多"),a("code",[s._v("connection reset / connection reset by peer")]),s._v("。")]),s._v(" "),a("p",[s._v("那么在实际开发中，我们怎么能快速定位到 tcp 队列溢出呢？")]),s._v(" "),a("p",[a("strong",[s._v('netstat 命令，执行 netstat -s | egrep "listen|LISTEN"')]),s._v(" "),a("img",{attrs:{src:"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-83828.jpg",alt:"img"}}),s._v("\n如上图所示，overflowed 表示全连接队列溢出的次数，sockets dropped 表示半连接队列溢出的次数。")]),s._v(" "),a("p",[a("strong",[s._v("ss 命令，执行 ss -lnt")]),s._v(" "),a("img",{attrs:{src:"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083828.jpg",alt:"img"}}),s._v("\n上面看到 Send-Q 表示第三列的 listen 端口上的全连接队列最大为 5，第一列 Recv-Q 为全连接队列当前使用了多少。")]),s._v(" "),a("p",[s._v("接着我们看看怎么设置全连接、半连接队列大小吧：")]),s._v(" "),a("p",[s._v("全连接队列的大小取决于 min(backlog, somaxconn)。backlog 是在 socket 创建的时候传入的，somaxconn 是一个 os 级别的系统参数。而半连接队列的大小取决于 max(64, /proc/sys/net/ipv4/tcp_max_syn_backlog)。")]),s._v(" "),a("p",[s._v("在日常开发中，我们往往使用 servlet 容器作为服务端，所以我们有时候也需要关注容器的连接队列大小。在 tomcat 中 backlog 叫做"),a("code",[s._v("acceptCount")]),s._v("，在 jetty 里面则是"),a("code",[s._v("acceptQueueSize")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"rst-异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rst-异常"}},[s._v("#")]),s._v(" RST 异常")]),s._v(" "),a("p",[s._v("RST 包表示连接重置，用于关闭一些无用的连接，通常表示异常关闭，区别于四次挥手。")]),s._v(" "),a("p",[s._v("在实际开发中，我们往往会看到"),a("code",[s._v("connection reset / connection reset by peer")]),s._v("错误，这种情况就是 RST 包导致的。")]),s._v(" "),a("p",[a("strong",[s._v("端口不存在")])]),s._v(" "),a("p",[s._v("如果像不存在的端口发出建立连接 SYN 请求，那么服务端发现自己并没有这个端口则会直接返回一个 RST 报文，用于中断连接。")]),s._v(" "),a("p",[a("strong",[s._v("主动代替 FIN 终止连接")])]),s._v(" "),a("p",[s._v("一般来说，正常的连接关闭都是需要通过 FIN 报文实现，然而我们也可以用 RST 报文来代替 FIN，表示直接终止连接。实际开发中，可设置 SO_LINGER 数值来控制，这种往往是故意的，来跳过 TIMED_WAIT，提供交互效率，不闲就慎用。")]),s._v(" "),a("p",[a("strong",[s._v("客户端或服务端有一边发生了异常，该方向对端发送 RST 以告知关闭连接")])]),s._v(" "),a("p",[s._v("我们上面讲的 tcp 队列溢出发送 RST 包其实也是属于这一种。这种往往是由于某些原因，一方无法再能正常处理请求连接了(比如程序崩了，队列满了)，从而告知另一方关闭连接。")]),s._v(" "),a("p",[a("strong",[s._v("接收到的 TCP 报文不在已知的 TCP 连接内")])]),s._v(" "),a("p",[s._v("比如，一方机器由于网络实在太差 TCP 报文失踪了，另一方关闭了该连接，然后过了许久收到了之前失踪的 TCP 报文，但由于对应的 TCP 连接已不存在，那么会直接发一个 RST 包以便开启新的连接。")]),s._v(" "),a("p",[a("strong",[s._v("一方长期未收到另一方的确认报文，在一定时间或重传次数后发出 RST 报文")])]),s._v(" "),a("p",[s._v("这种大多也和网络环境相关了，网络环境差可能会导致更多的 RST 报文。")]),s._v(" "),a("p",[s._v("之前说过 RST 报文多会导致程序报错，在一个已关闭的连接上读操作会报"),a("code",[s._v("connection reset")]),s._v("，而在一个已关闭的连接上写操作则会报"),a("code",[s._v("connection reset by peer")]),s._v("。通常我们可能还会看到"),a("code",[s._v("broken pipe")]),s._v("错误，这是管道层面的错误，表示对已关闭的管道进行读写，往往是在收到 RST，报出"),a("code",[s._v("connection reset")]),s._v("错后继续读写数据报的错，这个在 glibc 源码注释中也有介绍。")]),s._v(" "),a("p",[s._v("我们在诊断故障时候怎么确定有 RST 包的存在呢？当然是使用 tcpdump 命令进行抓包，并使用 wireshark 进行简单分析了。"),a("code",[s._v("tcpdump -i en0 tcp -w xxx.cap")]),s._v("，en0 表示监听的网卡。\n"),a("img",{attrs:{src:"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083829.jpg",alt:"img"}})]),s._v(" "),a("p",[s._v("接下来我们通过 wireshark 打开抓到的包，可能就能看到如下图所示，红色的就表示 RST 包了。\n"),a("img",{attrs:{src:"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083830.jpg",alt:"img"}})]),s._v(" "),a("h3",{attrs:{id:"time-wait-和-close-wait"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#time-wait-和-close-wait"}},[s._v("#")]),s._v(" TIME_WAIT 和 CLOSE_WAIT")]),s._v(" "),a("p",[s._v("TIME_WAIT 和 CLOSE_WAIT 是啥意思相信大家都知道。\n在线上时，我们可以直接用命令"),a("code",[s._v("netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'")]),s._v("来查看 time-wait 和 close_wait 的数量")]),s._v(" "),a("p",[s._v("用 ss 命令会更快"),a("code",[s._v("ss -ant | awk '{++S[$1]} END {for(a in S) print a, S[a]}'")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://fredal-blog.oss-cn-hangzhou.aliyuncs.com/2019-11-04-083830.png",alt:"img"}})]),s._v(" "),a("h4",{attrs:{id:"time-wait"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#time-wait"}},[s._v("#")]),s._v(" TIME_WAIT")]),s._v(" "),a("p",[s._v("time_wait 的存在一是为了丢失的数据包被后面连接复用，二是为了在 2MSL 的时间范围内正常关闭连接。它的存在其实会大大减少 RST 包的出现。")]),s._v(" "),a("p",[s._v("过多的 time_wait 在短连接频繁的场景比较容易出现。这种情况可以在服务端做一些内核参数调优:")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("#表示开启重用。允许将"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TIME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WAIT")]),s._v(" sockets重新用于新的"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("连接，默认为"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("，表示关闭\nnet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ipv4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tcp_tw_reuse "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n#表示开启"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("连接中"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TIME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WAIT")]),s._v(" sockets的快速回收，默认为"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("，表示关闭\nnet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ipv4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tcp_tw_recycle "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("当然我们不要忘记在 NAT 环境下因为时间戳错乱导致数据包被拒绝的坑了，另外的办法就是改小"),a("code",[s._v("tcp_max_tw_buckets")]),s._v("，超过这个数的 time_wait 都会被干掉，不过这也会导致报"),a("code",[s._v("time wait bucket table overflow")]),s._v("的错。")]),s._v(" "),a("h4",{attrs:{id:"close-wait"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#close-wait"}},[s._v("#")]),s._v(" CLOSE_WAIT")]),s._v(" "),a("p",[s._v("close_wait 往往都是因为应用程序写的有问题，没有在 ACK 后再次发起 FIN 报文。close_wait 出现的概率甚至比 time_wait 要更高，后果也更严重。往往是由于某个地方阻塞住了，没有正常关闭连接，从而渐渐地消耗完所有的线程。")]),s._v(" "),a("p",[s._v("想要定位这类问题，最好是通过 jstack 来分析线程堆栈来诊断问题，具体可参考上述章节。这里仅举一个例子。")]),s._v(" "),a("p",[s._v("开发同学说应用上线后 CLOSE_WAIT 就一直增多，直到挂掉为止，jstack 后找到比较可疑的堆栈是大部分线程都卡在了"),a("code",[s._v("countdownlatch.await")]),s._v("方法，找开发同学了解后得知使用了多线程但是确没有 catch 异常，修改后发现异常仅仅是最简单的升级 sdk 后常出现的"),a("code",[s._v("class not found")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"gc-问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gc-问题"}},[s._v("#")]),s._v(" GC 问题")]),s._v(" "),a("p",[s._v("GC 问题除了影响 CPU 也会影响内存，诊断思路也是一致的。")]),s._v(" "),a("p",[s._v("（1）通常，先使用 "),a("code",[s._v("jstat")]),s._v(" 来查看分代变化情况，比如 "),a("strong",[s._v("minor gc")]),s._v(" 或 "),a("strong",[s._v("full gc")]),s._v(" 次数是不是太频繁、耗时太久。")]),s._v(" "),a("p",[s._v("线程量太大，且不被及时 GC 也会引发 OOM，大部分就是之前说的 "),a("code",[s._v("unable to create new native thread")]),s._v("。除了 jstack 细细分析 dump 文件外，我们一般先会看下总体线程。")]),s._v(" "),a("p",[s._v("可以执行以下命令中任意一个，没来查看当前进程创建的总线程数。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("pstreee "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wc")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v(" /proc/pid/task "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wc")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-l")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("堆内内存泄漏总是和 GC 异常相伴。不过 GC 问题不只是和内存问题相关，还有可能引起 CPU 负载、网络问题等系列并发症，只是相对来说和内存联系紧密些，所以我们在此单独总结一下 GC 相关问题。")]),s._v(" "),a("p",[s._v("我们在 cpu 章介绍了使用 jstat 来获取当前 GC 分代变化信息。而更多时候，我们是通过 GC 日志来诊断问题的，在启动参数中加上"),a("code",[s._v("-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps")]),s._v("来开启 GC 日志。\n常见的 Minor GC、Full GC 日志含义在此就不做赘述了。")]),s._v(" "),a("p",[s._v("针对 gc 日志，我们就能大致推断出 Minor GC 与 fullGC 是否过于频繁或者耗时过长，从而对症下药。我们下面将对 G1 垃圾收集器来做分析，这边也建议大家使用 G1"),a("code",[s._v("-XX:+UseG1GC")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"oom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oom"}},[s._v("#")]),s._v(" OOM")]),s._v(" "),a("p",[s._v("查看 GC 日志，如果有明显提示 OOM 问题，那就可以根据提示信息，较为快速的定位问题。")]),s._v(" "),a("blockquote",[a("p",[s._v("OOM 定位可以参考："),a("RouterLink",{attrs:{to:"/02.后端/01.JavaSE/06.JVM/jvm-memory.html#三OutOfMemoryError"}},[s._v("JVM 内存管理 之 OutOfMemoryError")])],1)]),s._v(" "),a("h3",{attrs:{id:"minor-gc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minor-gc"}},[s._v("#")]),s._v(" Minor GC")]),s._v(" "),a("h4",{attrs:{id:"minor-gc-过频"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minor-gc-过频"}},[s._v("#")]),s._v(" Minor GC 过频")]),s._v(" "),a("p",[a("strong",[s._v("Minor GC 频繁一般是短周期的 Java 小对象较多")]),s._v("。")]),s._v(" "),a("p",[s._v("（1）先考虑是不是 Eden 区/新生代设置的太小了，看能否通过调整 "),a("code",[s._v("-Xmn、-XX:SurvivorRatio")]),s._v(" 等参数设置来解决问题。")]),s._v(" "),a("p",[s._v("（2）如果参数正常，但是 Minor GC 频率还是太高，就需要使用 "),a("code",[s._v("jmap")]),s._v(" 和 "),a("code",[s._v("MAT")]),s._v(" 对 dump 文件进行进一步诊断了。")]),s._v(" "),a("h4",{attrs:{id:"minor-gc-耗时过长"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minor-gc-耗时过长"}},[s._v("#")]),s._v(" Minor GC 耗时过长")]),s._v(" "),a("p",[s._v("Minor GC 耗时过长问题就要看 GC 日志里耗时耗在哪一块了。")]),s._v(" "),a("p",[s._v("以 G1 GC 日志为例，可以关注 Root Scanning、Object Copy、Ref Proc 等阶段。Ref Proc 耗时长，就要注意引用相关的对象。Root Scanning 耗时长，就要注意线程数、跨代引用。Object Copy 则需要关注对象生存周期。而且耗时分析它需要横向比较，就是和其他项目或者正常时间段的耗时比较。")]),s._v(" "),a("h3",{attrs:{id:"full-gc-过频"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#full-gc-过频"}},[s._v("#")]),s._v(" Full GC 过频")]),s._v(" "),a("p",[s._v("G1 中更多的还是 mixedGC，但 mixedGC 可以和 Minor GC 思路一样去诊断。触发 fullGC 了一般都会有问题，G1 会退化使用 Serial 收集器来完成垃圾的清理工作，暂停时长达到秒级别，可以说是半跪了。")]),s._v(" "),a("p",[s._v("fullGC 的原因可能包括以下这些，以及参数调整方面的一些思路：")]),s._v(" "),a("ul",[a("li",[s._v("并发阶段失败：在并发标记阶段，MixGC 之前老年代就被填满了，那么这时候 G1 就会放弃标记周期。这种情况，可能就需要增加堆大小，或者调整并发标记线程数"),a("code",[s._v("-XX:ConcGCThreads")]),s._v("。")]),s._v(" "),a("li",[s._v("晋升失败：在 GC 的时候没有足够的内存供存活/晋升对象使用，所以触发了 Full GC。这时候可以通过"),a("code",[s._v("-XX:G1ReservePercent")]),s._v("来增加预留内存百分比，减少"),a("code",[s._v("-XX:InitiatingHeapOccupancyPercent")]),s._v("来提前启动标记，"),a("code",[s._v("-XX:ConcGCThreads")]),s._v("来增加标记线程数也是可以的。")]),s._v(" "),a("li",[s._v("大对象分配失败：大对象找不到合适的 region 空间进行分配，就会进行 fullGC，这种情况下可以增大内存或者增大"),a("code",[s._v("-XX:G1HeapRegionSize")]),s._v("。")]),s._v(" "),a("li",[s._v("程序主动执行 System.gc()：不要随便写就对了。")])]),s._v(" "),a("p",[s._v("另外，我们可以在启动参数中配置"),a("code",[s._v("-XX:HeapDumpPath=/xxx/dump.hprof")]),s._v("来 dump fullGC 相关的文件，并通过 jinfo 来进行 gc 前后的 dump")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("jinfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HeapDumpBeforeFullGC")]),s._v(" pid\njinfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HeapDumpAfterFullGC")]),s._v(" pid\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这样得到 2 份 dump 文件，对比后主要关注被 gc 掉的问题对象来定位问题。")]),s._v(" "),a("h2",{attrs:{id:"常用-linux-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用-linux-命令"}},[s._v("#")]),s._v(" 常用 Linux 命令")]),s._v(" "),a("p",[s._v("在故障排查时，有一些 Linux 命令十分有用，建议掌握。")]),s._v(" "),a("h3",{attrs:{id:"top"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#top"}},[s._v("#")]),s._v(" top")]),s._v(" "),a("p",[s._v("top 命令可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的实用工具。")]),s._v(" "),a("p",[s._v("通常，会使用 "),a("code",[s._v("top -Hp pid")]),s._v(" 查看具体线程使用系统资源情况。")]),s._v(" "),a("blockquote",[a("p",[s._v("命令详情参考：http://man.linuxde.net/top")])]),s._v(" "),a("h3",{attrs:{id:"vmstat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vmstat"}},[s._v("#")]),s._v(" vmstat")]),s._v(" "),a("p",[s._v("vmstat 是一款指定采样周期和次数的功能性监测工具，我们可以看到，它不仅可以统计内存的使用情况，还可以观测到 CPU 的使用率、swap 的使用情况。但 vmstat 一般很少用来查看内存的使用情况，而是经常被用来观察进程的上下文切换。")]),s._v(" "),a("ul",[a("li",[s._v("r：等待运行的进程数；")]),s._v(" "),a("li",[s._v("b：处于非中断睡眠状态的进程数；")]),s._v(" "),a("li",[s._v("swpd：虚拟内存使用情况；")]),s._v(" "),a("li",[s._v("free：空闲的内存；")]),s._v(" "),a("li",[s._v("buff：用来作为缓冲的内存数；")]),s._v(" "),a("li",[s._v("si：从磁盘交换到内存的交换页数量；")]),s._v(" "),a("li",[s._v("so：从内存交换到磁盘的交换页数量；")]),s._v(" "),a("li",[s._v("bi：发送到块设备的块数；")]),s._v(" "),a("li",[s._v("bo：从块设备接收到的块数；")]),s._v(" "),a("li",[s._v("in：每秒中断数；")]),s._v(" "),a("li",[s._v("cs：每秒上下文切换次数；")]),s._v(" "),a("li",[s._v("us：用户 CPU 使用时间；")]),s._v(" "),a("li",[s._v("sy：内核 CPU 系统使用时间；")]),s._v(" "),a("li",[s._v("id：空闲时间；")]),s._v(" "),a("li",[s._v("wa：等待 I/O 时间；")]),s._v(" "),a("li",[s._v("st：运行虚拟机窃取的时间。")])]),s._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/intro/100028001",target:"_blank",rel:"noopener noreferrer"}},[s._v("《Java 性能调优实战》"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://fredal.xin/java-error-check",target:"_blank",rel:"noopener noreferrer"}},[s._v("JAVA 线上故障诊断全套路"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://tech.meituan.com/2017/12/29/jvm-optimize.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("从实际案例聊聊 Java 应用的 GC 优化"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);