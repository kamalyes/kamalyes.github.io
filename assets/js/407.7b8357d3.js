(window.webpackJsonp=window.webpackJsonp||[]).push([[407],{723:function(s,n,a){"use strict";a.r(n);var t=a(7),e=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"java-反射机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-反射机制"}},[s._v("#")]),s._v(" Java 反射机制")]),s._v(" "),n("h2",{attrs:{id:"关于反射的理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于反射的理解"}},[s._v("#")]),s._v(" 关于反射的理解")]),s._v(" "),n("p",[s._v("Reflection（反射）是被视为"),n("font",{attrs:{color:"red"}},[s._v(" 动态语言")]),s._v("的关键，反射机制允许程序在执行期借助 Reflection API 取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。"),n("br"),s._v("\n框架 = 反射 + 注解 + 设计模式 。")],1),s._v(" "),n("h2",{attrs:{id:"反射机制提供的功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反射机制提供的功能"}},[s._v("#")]),s._v(" 反射机制提供的功能")]),s._v(" "),n("ul",[n("li",[s._v("1.在运行时判断任意一个对象所属的类。")]),s._v(" "),n("li",[s._v("2.在运行时构造任意一个类的对象。")]),s._v(" "),n("li",[s._v("3.在运行时判断任意一个类所具有的成员变量和方法。")]),s._v(" "),n("li",[s._v("4.在运行时获取泛型信息。")]),s._v(" "),n("li",[s._v("5.在运行时调用任意一个对象的成员变量和方法。")]),s._v(" "),n("li",[s._v("6.在运行时处理注解。")]),s._v(" "),n("li",[s._v("7.生成动态代理。")])]),s._v(" "),n("h2",{attrs:{id:"class-类的理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-类的理解"}},[s._v("#")]),s._v(" Class 类的理解")]),s._v(" "),n("ul",[n("li",[s._v("1.类的加载过程："),n("br"),s._v("\n程序经过 javac.exe 命令以后，会生成一个或多个字节码文件(.class 结尾)。接着我们使用 java.exe 命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此运行时类，就作为 Class 的一个实例。")]),s._v(" "),n("li",[s._v("2.换句话说，Class 的实例就对应着一个运行时类。")]),s._v(" "),n("li",[s._v("3.加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类。")])]),s._v(" "),n("h2",{attrs:{id:"class-实例可以是哪些结构的说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-实例可以是哪些结构的说明"}},[s._v("#")]),s._v(" Class 实例可以是哪些结构的说明")]),s._v(" "),n("ul",[n("li",[s._v("class： 外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类")]),s._v(" "),n("li",[s._v("interface：接口")]),s._v(" "),n("li",[s._v("[]：数组")]),s._v(" "),n("li",[s._v("enum：枚举")]),s._v(" "),n("li",[s._v("annotation：注解@interface")]),s._v(" "),n("li",[s._v("primitive type：基本数据类型")]),s._v(" "),n("li",[s._v("void")])]),s._v(" "),n("h2",{attrs:{id:"获取-class-实例的几种方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取-class-实例的几种方式"}},[s._v("#")]),s._v(" 获取 Class 实例的几种方式")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[s._v("     "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Test")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("test3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//方式一：调用运行时类的属性：.class")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" clazz1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n         "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//方式二：通过运行时类的对象")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" p "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" clazz2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//方式三：调用Class的静态方法：forName(String classPath)，使用的最多")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v("  clazz3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Demo.Person"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//判断clazz1、clazz2、clazz3是不是指向的是同一个对象，是不是同一个地址值。")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取的是内存中的同一个运行时类")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" clazz2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" clazz3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//方式四：使用类的加载器：Classloader")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" classLoader "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReflectionTest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassLoader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" clazz4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" classLoader"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Demo.Person"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clazz1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" clazz4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("h2",{attrs:{id:"类的加载器的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的加载器的使用"}},[s._v("#")]),s._v(" 类的加载器的使用")]),s._v(" "),n("p",[s._v("类加载的作用：将 class 文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的 java.lang.Class 对象，作为方法区中类数据的访问入口。"),n("br"),s._v("\n类缓存作用：标准的 JavaSE 类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过 JVM 垃圾回收机制可以回收这些 Class 对象。")]),s._v(" "),n("h2",{attrs:{id:"使用-classloader-加载-src-目录下的配置文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-classloader-加载-src-目录下的配置文件"}},[s._v("#")]),s._v(" 使用 Classloader 加载 src 目录下的配置文件")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('      @Test\n    public void test2() throws IOException {\n        Properties pros = new Properties();\n        //此时的文件默认在当前的module下\n        //读取配置文件的方式一：\n        // FileInputStream fis = new FileInputStream("jdbc.properties");\n        // pros.load(fis);\n        //读取配置文件的方式二：\n        //此时的配置文件默认识别为idea当前module下的src下\n        ClassLoader classLoader = ClassLoadTest.class.getClassLoader();\n        InputStream is = classLoader.getResourceAsStream("jdbc11.properties");\n        pros.load(is);\n\n\n        String user = pros.getProperty("user");\n        String password = pros.getProperty("password");\n        System.out.println("user = " + user +", password = " + password);\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h2",{attrs:{id:"创建运行时类的对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建运行时类的对象"}},[s._v("#")]),s._v(" 创建运行时类的对象")]),s._v(" "),n("p",[s._v("创建类的对象：调用 Class 对象的"),n("font",{attrs:{color:"red"}},[s._v("newInstance()")]),s._v("。"),n("br"),s._v("\n要想此方法正常的创建运行时类的对象，要求："),n("br"),s._v("\n  1.运行时类必须提供空参的构造器。"),n("br"),s._v("\n  2.空参的构造器的访问权限需要满足条件，通常情况下设置为 public。")],1),s._v(" "),n("p",[s._v("在 Javabean 中要求提供一个 public 的空参构造器，原因："),n("br"),s._v("\n   1.便于通过反射，创建运行时类的对象。"),n("br"),s._v("\n   2.便于子类继承此运行时类时，默认使用 super()时，保证父类有此构造器。")]),s._v(" "),n("h2",{attrs:{id:"获取运行时类的完整结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取运行时类的完整结构"}},[s._v("#")]),s._v(" 获取运行时类的完整结构")]),s._v(" "),n("p",[s._v("通过反射，可以获取对应的运行时类中所有的属性、方法、构造器、父类、接口、父类的泛型、包、注解、异常等。")]),s._v(" "),n("h3",{attrs:{id:"获取属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取属性"}},[s._v("#")]),s._v(" 获取属性")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("     @Test\n    public void test1(){\n\n        Class clazz = Person.class;\n\n        //获取属性结构\n        //getFields()：获取当前运行时类及其父类中声明为public访问权限的属性\n        Field[] fields = clazz.getFields();\n        for (Field f : fields){\n            System.out.println(f);\n        }\n\n        //getDeclaredFields():获取当前运行时类中声明的所有属性。（不包含父类中声明的属性）\n        Field[] declaredFields = clazz.getDeclaredFields();\n        for (Field f : declaredFields){\n            System.out.println(f);\n        }\n\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("h3",{attrs:{id:"获取方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取方法"}},[s._v("#")]),s._v(" 获取方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('     @Test\n    public void test1(){\n        Class clazz = Person.class;\n\n        //getMethods():获取当前运行时类及其所有父类中声明为public权限的方法\n        Method[] methods = clazz.getMethods();\n        for (Method m : methods){\n            System.out.println(m);\n        }\n        System.out.println("**************");\n        //getDeclaredMethods():获取当前运行时类中声明的所有方法。（不包含父类中声明的方法）\n        Method[] declaredMethods = clazz.getDeclaredMethods();\n        for (Method m : declaredMethods){\n            System.out.println(m);\n        }\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h3",{attrs:{id:"其它相关的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其它相关的"}},[s._v("#")]),s._v(" 其它相关的")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("     /*\n     获取构造器结构\n     */\n    @Test\n    public void test1(){\n\n        Class clazz = Person.class;\n        //getConstructors()：获取当前运行时类的声明为public的构造器\n        Constructor[] constructors = clazz.getConstructors();\n        for (Constructor c : constructors){\n            System.out.println(c);\n        }\n\n        System.out.println();\n        //getDeclaredConstructors()：获取当前运行时类中声明的所有的构造器\n        Constructor[] declaredConstructors = clazz.getDeclaredConstructors();\n        for (Constructor c : declaredConstructors){\n            System.out.println(c);\n        }\n    }\n\n    /*\n     获取当前运行时类的父类\n     */\n    @Test\n    public void test2(){\n    Class clazz = Person.class;\n        Class superclass = clazz.getSuperclass();\n        System.out.println(superclass);\n\n    }\n\n    /*\n     获取当前运行时类的带泛型的父类\n     */\n    @Test\n    public void test3(){\n        Class clazz = Person.class;\n        Type genericSuperclass = clazz.getGenericSuperclass();\n        System.out.println(genericSuperclass);\n\n    }\n\n     /*\n     获取当前运行时类的带泛型的父类的泛型(可能用到)\n     */\n    @Test\n    public void test4(){\n        Class clazz = Person.class;\n        Type genericSuperclass = clazz.getGenericSuperclass();\n        ParameterizedType paramType = (ParameterizedType) genericSuperclass;\n        //获取泛型类型\n        Type[] actualTypeArguments = paramType.getActualTypeArguments();\n\n       // System.out.println(actualTypeArguments[0].getTypeName());\n        System.out.println(((Class)actualTypeArguments[0]).getName());\n\n    }\n\n    /*\n    获取运行时类实现的接口(动态代理中可能用到)\n     */\n    @Test\n    public void test5(){\n        Class clazz = Person.class;\n        Class[] interfaces = clazz.getInterfaces();\n        for (Class c : interfaces){\n            System.out.println(c);\n        }\n        System.out.println();\n\n        //获取运行时类的父类实现的接口\n        Class[] interfaces1 = clazz.getSuperclass().getInterfaces();\n        for (Class c : interfaces1){\n            System.out.println(c);\n        }\n    }\n\n    /*\n    获取当前运行时类所在的包\n     */\n    @Test\n    public void test6(){\n        Class clazz = Person.class;\n        Package pack = clazz.getPackage();\n        System.out.println(pack);\n\n    }\n\n    /*\n     获取运行时类声明的注解\n     */\n    @Test\n    public void test7(){\n        Class clazz = Person.class;\n        Annotation[] annotations = clazz.getAnnotations();\n        for (Annotation a : annotations){\n            System.out.println(a);\n        }\n\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br")])]),n("h2",{attrs:{id:"调用运行时类的指定结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用运行时类的指定结构"}},[s._v("#")]),s._v(" 调用运行时类的指定结构")]),s._v(" "),n("h3",{attrs:{id:"调用指定的属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用指定的属性"}},[s._v("#")]),s._v(" 调用指定的属性")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('     @Test\n    public void test2() throws Exception {\n        Class clazz = Person.class;\n\n        //创建运行时类的对象\n        Person p = (Person) clazz.newInstance();\n\n        //1.getDeclaredField():获取运行时类中指定变量名的属性\n        Field name = clazz.getDeclaredField("name");\n\n        //2.保证当前属性是可访问的\n        name.setAccessible(true);\n        //3.根据实际需求获取、设置指定对象的此属性值\n        name.set(p,"haha");\n\n        System.out.println(name.get(p));\n\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h3",{attrs:{id:"调用指定的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用指定的方法"}},[s._v("#")]),s._v(" 调用指定的方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    @Test\n    public void test3() throws Exception {\n\n        Class clazz = Person.class;\n\n        //创建运行时类的对象\n        Person p = (Person) clazz.newInstance();\n\n        /*\n        1.获取指定的某个方法\n        getDeclaredMethod()：参数1：指明获取的方法的名称  参数2：指明获取的方法的形参列表\n         */\n\n        Method show = clazz.getDeclaredMethod("show", String.class);\n\n        //2.保证当前方法是可访问的\n        show.setAccessible(true);\n        /*\n        3.调用方法的invoke()：参数1：方法的调用者 参数2：给方法形参赋值的实参\n           invoke()的返回值即为对应类中调用的方法的返回值\n         */\n        Object rerurnValue = show.invoke(p,"china");\n        System.out.println(rerurnValue);\n\n        System.out.println("******************如何调用静态方法***********************");\n\n        Method showDesc = clazz.getDeclaredMethod("showDesc");\n        showDesc.setAccessible(true);\n\n        //如果调用的运行时类中的方法没有返回值，则此invoke()返回值为null\n        Object returnVal = showDesc.invoke(Person.class);\n        System.out.println(returnVal);\n\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])]),n("h3",{attrs:{id:"调用指定的构造器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用指定的构造器"}},[s._v("#")]),s._v(" 调用指定的构造器")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    @Test\n    public void test4() throws Exception {\n        Class clazz = Person.class;\n\n      /*\n      1.获取指定的构造器\n      getDeclaredConstructor():参数：指明构造器的参数列表\n       */\n        Constructor constructor = clazz.getDeclaredConstructor(String.class);\n      //2.保证此构造器是可访问的\n        constructor.setAccessible(true);\n\n      //3.调用此构造器创建运行时类的对象\n        Person instance = (Person) constructor.newInstance("heihei");\n        System.out.println(instance);\n\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("h2",{attrs:{id:"动态代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态代理"}},[s._v("#")]),s._v(" 动态代理")]),s._v(" "),n("h3",{attrs:{id:"_1-代理模式的原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-代理模式的原理"}},[s._v("#")]),s._v(" 1.代理模式的原理")]),s._v(" "),n("p",[s._v("使用一个代理（代理对象）将对象（被代理对象）包装起来, 然后用该代理对象取代原始对象（被代理对象）。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。")]),s._v(" "),n("h3",{attrs:{id:"_2-静态代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-静态代理"}},[s._v("#")]),s._v(" 2.静态代理")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    interface ClothFactory{\n        void produceCloth();\n    }\n\n    //代理类\n    class  ProxyClothFactory implements ClothFactory{\n\n        private  ClothFactory factory;//用被代理类对象进行实例化\n\n        public ProxyClothFactory(ClothFactory factory) {\n            this.factory = factory;\n        }\n\n        @Override\n        public void produceCloth() {\n            System.out.println("代理工厂做一些准备工作");\n            factory.produceCloth();\n            System.out.println("代理工厂做一些后续的工作");\n        }\n    }\n\n    //被代理类\n    class NikeClothFactory implements ClothFactory{\n\n        @Override\n        public void produceCloth() {\n            System.out.println("Nike工厂生产一批商品");\n        }\n    }\n\n    //进行测试\n    public class StaticProxyTest {\n        public static void main(String[] args) {\n            //创建被代理类对象\n            NikeClothFactory nike = new NikeClothFactory();\n            //创建代理类对象\n            ProxyClothFactory proxyClothFactory = new ProxyClothFactory(nike);\n\n            proxyClothFactory.produceCloth();\n\n        }\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br")])]),n("h3",{attrs:{id:"_3-动态代理的特点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-动态代理的特点"}},[s._v("#")]),s._v(" 3 动态代理的特点")]),s._v(" "),n("p",[s._v("动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。"),n("br"),s._v("\n动态代理使用场合:"),n("br"),s._v("\n  调试"),n("br"),s._v("\n  远程方法调用"),n("br"),s._v("\n动态代理相比于静态代理的优点："),n("br"),s._v("\n抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中 处理，这样，我们可以更加灵活和统一的处理众多的方法。")]),s._v(" "),n("p",[s._v("代码举例如下:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('    interface  Human{\n        String getBelief();\n        void eat(String food);\n    }\n\n    //被代理类\n    class  SuperMan implements Human{\n\n        @Override\n        public String getBelief() {\n            return "I believe I can fly";\n        }\n\n        @Override\n        public void eat(String food) {\n            System.out.println("我喜欢吃 " + food);\n        }\n    }\n\n    class HumanUtil{\n        public void method1(){\n            System.out.println("*******方法一*******");\n        }\n        public void method2(){\n            System.out.println("******方法二********");\n        }\n    }\n\n    class ProxyFactory{\n\n        //调用此方法，返回一个被代理类的对象。\n        public static Object getProxyInstance(Object obj){ //obj：被代理类的对象\n            MyInvocationHandler handler = new MyInvocationHandler();\n\n            handler.bind(obj);\n\n            return  Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),handler);\n        }\n    }\n\n\n    class MyInvocationHandler implements InvocationHandler{\n\n        private Object obj;//需要使用被代理类对象进行赋值\n\n        public void bind(Object obj){\n            this.obj = obj;\n    }\n\n    //当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke()\n    //将被代理类要执行的方法a的功能就声明在invoke()中\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\n            HumanUtil util = new HumanUtil();\n            util.method1();\n\n            //method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法\n            //obj:被代理类的对象\n            Object returnValue = method.invoke(obj, args);\n\n            util.method2();\n\n            //上述方法（代理类对象或被代理类对象调用的方法）的返回值就作为当前类中的invoke()的返回值\n            return  returnValue;\n        }\n    }\n\n    public class ProxyTest {\n        public static void main(String[] args) {\n\n            SuperMan superMan = new SuperMan();\n            //proxyInstance:代理类的对象\n            Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan);\n            //当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法\n            String belief = proxyInstance.getBelief();\n            System.out.println(belief);\n            proxyInstance.eat("汉堡包");\n\n            System.out.println("********************");\n\n\n            NikeClothFactory nikeClothFactory = new NikeClothFactory();\n\n            ClothFactory proxyClothFatory = (ClothFactory) ProxyFactory.getProxyInstance(nikeClothFactory);\n\n            proxyClothFatory.produceCloth();\n\n        }\n\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br")])]),n("p",[n("strong",[s._v("Java 的反射机制主要体现在其动态性上")])])])}),[],!1,null,null,null);n.default=e.exports}}]);