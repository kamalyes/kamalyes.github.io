(window.webpackJsonp=window.webpackJsonp||[]).push([[336],{651:function(s,t,a){"use strict";a.r(t);var e=a(7),r=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"docker-镜像原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像原理"}},[s._v("#")]),s._v(" Docker 镜像原理")]),s._v(" "),t("h2",{attrs:{id:"镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#镜像"}},[s._v("#")]),s._v(" 镜像")]),s._v(" "),t("p",[s._v("镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。")]),s._v(" "),t("h2",{attrs:{id:"_1-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-是什么"}},[s._v("#")]),s._v(" 1.是什么")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("UnionFs（联合文件系统）：union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件下。\nUnion文件系统是Docker镜像的基础，镜像可以通过分层来进行继承，基于基础镜像，可以制作各种具体的应用镜像。\n特性：一次同时加载多个文件系统，但从外面看来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"_2-docker-镜像加载原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-docker-镜像加载原理"}},[s._v("#")]),s._v(" 2.Docker 镜像加载原理")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("Docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统就是 UnionFs\nBootfs（boot-file system）主要包含bootloader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("加载器"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("和kernel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("内核"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs，这一层与我们典型的Linux/unix系统是一样的，包含boot加载器和内核，当boot加载完成之后整个内核就能在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。\nRootfs（root-file system），在bootfs之上，包含的就是典型Linux系统中的/dev、/proc、/bin、/etc等标准目录和文件，rootfs就是各种不同操作系统的发行版，比如Ubuntu，Centos等等。\n对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序就可以了，因为底层直接用宿主机的内核，自己只需要提供rootfs就可以了，因此可见，对于不用的Linux发行版，bootfs基本是一致的，而rootfs会有差别，因此不同的发行版可以公用bootfs。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"_3-docker-为什么采用分层结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-docker-为什么采用分层结构"}},[s._v("#")]),s._v(" 3.Docker 为什么采用分层结构？")]),s._v(" "),t("p",[t("strong",[s._v("为了共享资源")])]),s._v(" "),t("p",[s._v("例如：多个镜像从相同的父镜像构建而来，那么宿主机只需在磁盘上保存一份父镜像，同时内存中也只需加载一份父镜像就可以为所有容器服务了，并且镜像的每一层都可以被共享。")]),s._v(" "),t("h2",{attrs:{id:"_4-docker-镜像特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-docker-镜像特点"}},[s._v("#")]),s._v(" 4.Docker 镜像特点")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". Docker镜像只读\n当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫做“镜像层”\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". 当镜像实例为容器后，只有最外层是可写的。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])])}),[],!1,null,null,null);t.default=r.exports}}]);