(window.webpackJsonp=window.webpackJsonp||[]).push([[765],{1078:function(s,t,a){"use strict";a.r(t);var e=a(7),r=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"mysql-性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql-性能优化"}},[s._v("#")]),s._v(" Mysql 性能优化")]),s._v(" "),t("h2",{attrs:{id:"_1-数据结构优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据结构优化"}},[s._v("#")]),s._v(" 1. 数据结构优化")]),s._v(" "),t("p",[s._v("良好的逻辑设计和物理设计是高性能的基石。")]),s._v(" "),t("h3",{attrs:{id:"_1-1-数据类型优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-数据类型优化"}},[s._v("#")]),s._v(" 1.1. 数据类型优化")]),s._v(" "),t("h4",{attrs:{id:"数据类型优化基本原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型优化基本原则"}},[s._v("#")]),s._v(" 数据类型优化基本原则")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("更小的通常更好")]),s._v(" - 越小的数据类型通常会更快，占用更少的磁盘、内存，处理时需要的 CPU 周期也更少。\n"),t("ul",[t("li",[s._v("例如：整型比字符类型操作代价低，因而会使用整型来存储 IP 地址，使用 "),t("code",[s._v("DATETIME")]),s._v(" 来存储时间，而不是使用字符串。")])])]),s._v(" "),t("li",[t("strong",[s._v("简单就好")]),s._v(" - 如整型比字符型操作代价低。\n"),t("ul",[t("li",[s._v("例如：很多软件会用整型来存储 IP 地址。")]),s._v(" "),t("li",[s._v("例如："),t("strong",[t("code",[s._v("UNSIGNED")]),s._v(" 表示不允许负值，大致可以使正数的上限提高一倍")]),s._v("。")])])]),s._v(" "),t("li",[t("strong",[s._v("尽量避免 NULL")]),s._v(" - 可为 NULL 的列会使得索引、索引统计和值比较都更复杂。")])]),s._v(" "),t("h4",{attrs:{id:"类型的选择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型的选择"}},[s._v("#")]),s._v(" 类型的选择")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("整数类型通常是标识列最好的选择，因为它们很快并且可以使用 "),t("code",[s._v("AUTO_INCREMENT")]),s._v("。")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("ENUM")]),s._v(" 和 "),t("code",[s._v("SET")]),s._v(" 类型通常是一个糟糕的选择，应尽量避免。")])]),s._v(" "),t("li",[t("p",[s._v("应该尽量避免用字符串类型作为标识列，因为它们很消耗空间，并且通常比数字类型慢。对于 "),t("code",[s._v("MD5")]),s._v("、"),t("code",[s._v("SHA")]),s._v("、"),t("code",[s._v("UUID")]),s._v(" 这类随机字符串，由于比较随机，所以可能分布在很大的空间内，导致 "),t("code",[s._v("INSERT")]),s._v(" 以及一些 "),t("code",[s._v("SELECT")]),s._v(" 语句变得很慢。")]),s._v(" "),t("ul",[t("li",[s._v("如果存储 UUID ，应该移除 "),t("code",[s._v("-")]),s._v(" 符号；更好的做法是，用 "),t("code",[s._v("UNHEX()")]),s._v(" 函数转换 UUID 值为 16 字节的数字，并存储在一个 "),t("code",[s._v("BINARY(16)")]),s._v(" 的列中，检索时，可以通过 "),t("code",[s._v("HEX()")]),s._v(" 函数来格式化为 16 进制格式。")])])])]),s._v(" "),t("h3",{attrs:{id:"_1-2-表设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-表设计"}},[s._v("#")]),s._v(" 1.2. 表设计")]),s._v(" "),t("p",[s._v("应该避免的设计问题：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("太多的列")]),s._v(" - 设计者为了图方便，将大量冗余列加入表中，实际查询中，表中很多列是用不到的。这种宽表模式设计，会造成不小的性能代价，尤其是 "),t("code",[s._v("ALTER TABLE")]),s._v(" 非常耗时。")]),s._v(" "),t("li",[t("strong",[s._v("太多的关联")]),s._v(" - 所谓的实体 - 属性 - 值（EVA）设计模式是一个常见的糟糕设计模式。Mysql 限制了每个关联操作最多只能有 61 张表，但 EVA 模式需要许多自关联。")]),s._v(" "),t("li",[t("strong",[s._v("枚举")]),s._v(" - 尽量不要用枚举，因为添加和删除字符串（枚举选项）必须使用 "),t("code",[s._v("ALTER TABLE")]),s._v("。")]),s._v(" "),t("li",[s._v("尽量避免 "),t("code",[s._v("NULL")])])]),s._v(" "),t("h3",{attrs:{id:"_1-3-范式和反范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-范式和反范式"}},[s._v("#")]),s._v(" 1.3. 范式和反范式")]),s._v(" "),t("p",[t("strong",[s._v("范式化目标是尽量减少冗余，而反范式化则相反")]),s._v("。")]),s._v(" "),t("p",[s._v("范式化的优点：")]),s._v(" "),t("ul",[t("li",[s._v("比反范式更节省空间")]),s._v(" "),t("li",[s._v("更新操作比反范式快")]),s._v(" "),t("li",[s._v("更少需要 "),t("code",[s._v("DISTINCT")]),s._v(" 或 "),t("code",[s._v("GROUP BY")]),s._v(" 语句")])]),s._v(" "),t("p",[s._v("范式化的缺点：")]),s._v(" "),t("ul",[t("li",[s._v("通常需要关联查询。而关联查询代价较高，如果是分表的关联查询，代价更是高昂。")])]),s._v(" "),t("p",[s._v("在真实世界中，很少会极端地使用范式化或反范式化。实际上，应该权衡范式和反范式的利弊，混合使用。")]),s._v(" "),t("h3",{attrs:{id:"_1-4-索引优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-索引优化"}},[s._v("#")]),s._v(" 1.4. 索引优化")]),s._v(" "),t("blockquote",[t("p",[s._v("索引优化应该是查询性能优化的最有效手段。")]),s._v(" "),t("p",[s._v("如果想详细了解索引特性请参考："),t("a",{attrs:{href:"https://github.com/kamalyes/db-tutorial/blob/master/docs/sql/mysql/mysql-index.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("Mysql 索引"),t("OutboundLink")],1)])]),s._v(" "),t("h4",{attrs:{id:"何时使用索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何时使用索引"}},[s._v("#")]),s._v(" 何时使用索引")]),s._v(" "),t("ul",[t("li",[s._v("对于非常小的表，大部分情况下简单的全表扫描更高效。")]),s._v(" "),t("li",[s._v("对于中、大型表，索引非常有效。")]),s._v(" "),t("li",[s._v("对于特大型表，建立和使用索引的代价将随之增长。可以考虑使用分区技术。")]),s._v(" "),t("li",[s._v("如果表的数量特别多，可以建立一个元数据信息表，用来查询需要用到的某些特性。")])]),s._v(" "),t("h4",{attrs:{id:"索引优化策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引优化策略"}},[s._v("#")]),s._v(" 索引优化策略")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("索引基本原则")]),s._v(" "),t("ul",[t("li",[s._v("索引不是越多越好，不要为所有列都创建索引。")]),s._v(" "),t("li",[s._v("要尽量避免冗余和重复索引。")]),s._v(" "),t("li",[s._v("要考虑删除未使用的索引。")]),s._v(" "),t("li",[s._v("尽量的扩展索引，不要新建索引。")]),s._v(" "),t("li",[s._v("频繁作为 "),t("code",[s._v("WHERE")]),s._v(" 过滤条件的列应该考虑添加索引。")])])]),s._v(" "),t("li",[t("strong",[s._v("独立的列")]),s._v(" - “独立的列” 是指索引列不能是表达式的一部分，也不能是函数的参数。")]),s._v(" "),t("li",[t("strong",[s._v("前缀索引")]),s._v(" - 索引很长的字符列，可以索引开始的部分字符，这样可以大大节约索引空间。")]),s._v(" "),t("li",[t("strong",[s._v("最左匹配原则")]),s._v(" - 将选择性高的列或基数大的列优先排在多列索引最前列。")]),s._v(" "),t("li",[t("strong",[s._v("使用索引来排序")]),s._v(" - 索引最好既满足排序，又用于查找行。这样，就可以使用索引来对结果排序。")]),s._v(" "),t("li",[t("code",[s._v("=")]),s._v("、"),t("code",[s._v("IN")]),s._v(" 可以乱序 - 不需要考虑 "),t("code",[s._v("=")]),s._v("、"),t("code",[s._v("IN")]),s._v(" 等的顺序")]),s._v(" "),t("li",[t("strong",[s._v("覆盖索引")])]),s._v(" "),t("li",[t("strong",[s._v("自增字段作主键")])])]),s._v(" "),t("h2",{attrs:{id:"_2-sql-优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-sql-优化"}},[s._v("#")]),s._v(" 2. SQL 优化")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("EXPLAIN")]),s._v(" 命令查看当前 SQL 是否使用了索引，优化后，再通过执行计划（"),t("code",[s._v("EXPLAIN")]),s._v("）来查看优化效果。")]),s._v(" "),t("p",[s._v("SQL 优化基本思路：")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("只返回必要的列")]),s._v(" - 最好不要使用 "),t("code",[s._v("SELECT *")]),s._v(" 语句。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("只返回必要的行")]),s._v(" - 使用 "),t("code",[s._v("WHERE")]),s._v(" 子查询语句进行过滤查询，有时候也需要使用 "),t("code",[s._v("LIMIT")]),s._v(" 语句来限制返回的数据。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("缓存重复查询的数据")]),s._v(" - 应该考虑在客户端使用缓存，尽量不要使用 Mysql 服务器缓存（存在较多问题和限制）。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("使用索引来覆盖查询")])])])]),s._v(" "),t("h3",{attrs:{id:"_2-1-优化-count-查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-优化-count-查询"}},[s._v("#")]),s._v(" 2.1. 优化 "),t("code",[s._v("COUNT()")]),s._v(" 查询")]),s._v(" "),t("p",[t("code",[s._v("COUNT()")]),s._v(" 有两种作用：")]),s._v(" "),t("ul",[t("li",[s._v("统计某个列值的数量。统计列值时，要求列值是非 "),t("code",[s._v("NULL")]),s._v(" 的，它不会统计 "),t("code",[s._v("NULL")]),s._v("。")]),s._v(" "),t("li",[s._v("统计行数。")])]),s._v(" "),t("p",[t("strong",[s._v("统计列值时，要求列值是非空的，它不会统计 NULL")]),s._v("。如果确认括号中的表达式不可能为空时，实际上就是在统计行数。最简单的就是当使用 "),t("code",[s._v("COUNT(*)")]),s._v(" 时，并不是我们所想象的那样扩展成所有的列，实际上，它会忽略所有的列而直接统计行数。")]),s._v(" "),t("p",[s._v("我们最常见的误解也就在这儿，在括号内指定了一列却希望统计结果是行数，而且还常常误以为前者的性能会更好。但实际并非这样，如果要统计行数，直接使用 "),t("code",[s._v("COUNT(*)")]),s._v("，意义清晰，且性能更好。")]),s._v(" "),t("p",[s._v("（1）简单优化")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" world"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("city "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" world"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("city"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" world"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("city "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("（2）使用近似值")]),s._v(" "),t("p",[s._v("有时候某些业务场景并不需要完全精确的统计值，可以用近似值来代替，"),t("code",[s._v("EXPLAIN")]),s._v(" 出来的行数就是一个不错的近似值，而且执行 "),t("code",[s._v("EXPLAIN")]),s._v(" 并不需要真正地去执行查询，所以成本非常低。通常来说，执行 "),t("code",[s._v("COUNT()")]),s._v(" 都需要扫描大量的行才能获取到精确的数据，因此很难优化，MySQL 层面还能做得也就只有覆盖索引了。如果不还能解决问题，只有从架构层面解决了，比如添加汇总表，或者使用 Redis 这样的外部缓存系统。")]),s._v(" "),t("h3",{attrs:{id:"_2-2-优化关联查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-优化关联查询"}},[s._v("#")]),s._v(" 2.2. 优化关联查询")]),s._v(" "),t("p",[s._v("在大数据场景下，表与表之间通过一个冗余字段来关联，要比直接使用 "),t("code",[s._v("JOIN")]),s._v(" 有更好的性能。")]),s._v(" "),t("p",[s._v("如果确实需要使用关联查询的情况下，需要特别注意的是：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("确保 "),t("code",[s._v("ON")]),s._v(" 和 "),t("code",[s._v("USING")]),s._v(" 字句中的列上有索引")]),s._v("。在创建索引的时候就要考虑到关联的顺序。当表 A 和表 B 用某列 column 关联的时候，如果优化器关联的顺序是 A、B，那么就不需要在 A 表的对应列上创建索引。没有用到的索引会带来额外的负担，一般来说，除非有其他理由，只需要在关联顺序中的第二张表的相应列上创建索引（具体原因下文分析）。")]),s._v(" "),t("li",[t("strong",[s._v("确保任何的 "),t("code",[s._v("GROUP BY")]),s._v(" 和 "),t("code",[s._v("ORDER BY")]),s._v(" 中的表达式只涉及到一个表中的列")]),s._v("，这样 MySQL 才有可能使用索引来优化。")])]),s._v(" "),t("p",[s._v("要理解优化关联查询的第一个技巧，就需要理解 MySQL 是如何执行关联查询的。当前 MySQL 关联执行的策略非常简单，它对任何的关联都执行"),t("strong",[s._v("嵌套循环关联")]),s._v("操作，即先在一个表中循环取出单条数据，然后在嵌套循环到下一个表中寻找匹配的行，依次下去，直到找到所有表中匹配的行为为止。然后根据各个表匹配的行，返回查询中需要的各个列。")]),s._v(" "),t("p",[s._v("太抽象了？以上面的示例来说明，比如有这样的一个查询：")]),s._v(" "),t("div",{staticClass:"language-css line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-css"}},[t("code",[s._v("SELECT A.xx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("B.yy\nFROM A INNER JOIN B "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("USING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nWHERE A.xx IN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("5"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("6"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("假设 MySQL 按照查询中的关联顺序 A、B 来进行关联操作，那么可以用下面的伪代码表示 MySQL 如何完成这个查询：")]),s._v(" "),t("div",{staticClass:"language-ruby line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("outer_iterator "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("xx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("c "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FROM")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WHERE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("xx "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nouter_row "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" outer_iterator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("outer_row"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    inner_iterator "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("yy "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FROM")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WHERE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" outer_row"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    inner_row "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" inner_iterator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("inner_row"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        output"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("inner_row"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("yy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("outer_row"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("xx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        inner_row "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" inner_iterator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    outer_row "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" outer_iterator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("可以看到，最外层的查询是根据"),t("code",[s._v("A.xx")]),s._v("列来查询的，"),t("code",[s._v("A.c")]),s._v("上如果有索引的话，整个关联查询也不会使用。再看内层的查询，很明显"),t("code",[s._v("B.c")]),s._v("上如果有索引的话，能够加速查询，因此只需要在关联顺序中的第二张表的相应列上创建索引即可。")]),s._v(" "),t("h3",{attrs:{id:"_2-3-优化-group-by-和-distinct"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-优化-group-by-和-distinct"}},[s._v("#")]),s._v(" 2.3. 优化 "),t("code",[s._v("GROUP BY")]),s._v(" 和 "),t("code",[s._v("DISTINCT")])]),s._v(" "),t("p",[s._v("Mysql 优化器会在内部处理的时候相互转化这两类查询。它们都"),t("strong",[s._v("可以使用索引来优化，这也是最有效的优化方法")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"_2-4-优化-limit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-优化-limit"}},[s._v("#")]),s._v(" 2.4. 优化 "),t("code",[s._v("LIMIT")])]),s._v(" "),t("p",[s._v("当需要分页操作时，通常会使用 "),t("code",[s._v("LIMIT")]),s._v(" 加上偏移量的办法实现，同时加上合适的 "),t("code",[s._v("ORDER BY")]),s._v(" 字句。"),t("strong",[s._v("如果有对应的索引，通常效率会不错，否则，MySQL 需要做大量的文件排序操作")]),s._v("。")]),s._v(" "),t("p",[s._v("一个常见的问题是当偏移量非常大的时候，比如："),t("code",[s._v("LIMIT 10000 20")]),s._v("这样的查询，MySQL 需要查询 10020 条记录然后只返回 20 条记录，前面的 10000 条都将被抛弃，这样的代价非常高。")]),s._v(" "),t("p",[s._v("优化这种查询一个最简单的办法就是尽可能的使用覆盖索引扫描，而不是查询所有的列。然后根据需要做一次关联查询再返回所有的列。对于偏移量很大时，这样做的效率会提升非常大。考虑下面的查询：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("description "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" film "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" title "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果这张表非常大，那么这个查询最好改成下面的样子：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("film"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("description\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" film "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" film_id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" film "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" title "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" tmp "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("USING")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("film_id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这里的延迟关联将大大提升查询效率，让 MySQL 扫描尽可能少的页面，获取需要访问的记录后在根据关联列回原表查询所需要的列。")]),s._v(" "),t("p",[s._v("有时候如果可以使用书签记录上次取数据的位置，那么下次就可以直接从该书签记录的位置开始扫描，这样就可以避免使用"),t("code",[s._v("OFFSET")]),s._v("，比如下面的查询：")]),s._v(" "),t("div",{staticClass:"language-objectivec line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-objectivec"}},[t("code",[s._v("SELECT id FROM t LIMIT "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n改为：\nSELECT id FROM t WHERE id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" LIMIT "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("其他优化的办法还包括使用预先计算的汇总表，或者关联到一个冗余表，冗余表中只包含主键列和需要做排序的列。")]),s._v(" "),t("h3",{attrs:{id:"_2-5-优化-union"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-优化-union"}},[s._v("#")]),s._v(" 2.5. 优化 UNION")]),s._v(" "),t("p",[s._v("MySQL 总是通过创建并填充临时表的方式来执行 "),t("code",[s._v("UNION")]),s._v(" 查询。因此很多优化策略在"),t("code",[s._v("UNION")]),s._v("查询中都没有办法很好的时候。经常需要手动将"),t("code",[s._v("WHERE")]),s._v("、"),t("code",[s._v("LIMIT")]),s._v("、"),t("code",[s._v("ORDER BY")]),s._v("等字句“下推”到各个子查询中，以便优化器可以充分利用这些条件先优化。")]),s._v(" "),t("p",[s._v("除非确实需要服务器去重，否则就一定要使用"),t("code",[s._v("UNION ALL")]),s._v("，如果没有"),t("code",[s._v("ALL")]),s._v("关键字，MySQL 会给临时表加上"),t("code",[s._v("DISTINCT")]),s._v("选项，这会导致整个临时表的数据做唯一性检查，这样做的代价非常高。当然即使使用 ALL 关键字，MySQL 总是将结果放入临时表，然后再读出，再返回给客户端。虽然很多时候没有这个必要，比如有时候可以直接把每个子查询的结果返回给客户端。")]),s._v(" "),t("h3",{attrs:{id:"_2-6-优化查询方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-优化查询方式"}},[s._v("#")]),s._v(" 2.6. 优化查询方式")]),s._v(" "),t("h4",{attrs:{id:"切分大查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#切分大查询"}},[s._v("#")]),s._v(" 切分大查询")]),s._v(" "),t("p",[s._v("一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("DELEFT "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" messages "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" DATE_SUB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("NOW")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTERVAL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MONTH")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("rows_affected "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" {\n    rows_affected "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" do_query"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"DELETE FROM messages WHERE create  < DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n} "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" rows_affected "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h4",{attrs:{id:"分解大连接查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分解大连接查询"}},[s._v("#")]),s._v(" 分解大连接查询")]),s._v(" "),t("p",[s._v("将一个大连接查询（JOIN）分解成对每一个表进行一次单表查询，然后将结果在应用程序中进行关联，这样做的好处有：")]),s._v(" "),t("ul",[t("li",[s._v("让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。")]),s._v(" "),t("li",[s._v("分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。")]),s._v(" "),t("li",[s._v("减少锁竞争；")]),s._v(" "),t("li",[s._v("在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可扩展。")]),s._v(" "),t("li",[s._v("查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tag\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" tag_post "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" tag_post"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tag_id"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("tag"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" post "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" tag_post"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("post_id"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("post"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" tag"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tag"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'mysql'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tag "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" tag"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'mysql'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tag_post "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" tag_id"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1234")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" post "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" post"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("567")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9098")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8904")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"_3-执行计划-explain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-执行计划-explain"}},[s._v("#")]),s._v(" 3. 执行计划（"),t("code",[s._v("EXPLAIN")]),s._v("）")]),s._v(" "),t("p",[s._v("如何判断当前 SQL 是否使用了索引？如何检验修改后的 SQL 确实有优化效果？")]),s._v(" "),t("p",[s._v("在 SQL 中，可以通过执行计划（"),t("code",[s._v("EXPLAIN")]),s._v("）分析 "),t("code",[s._v("SELECT")]),s._v(" 查询效率。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" user_info "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\\G\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("row")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("\n           id: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  select_type: "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SIMPLE")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(": user_info\n   partitions: "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(": const\npossible_keys: "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v(": "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v("\n      key_len: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("\n          ref: const\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rows")]),s._v(": "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n     filtered: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.00")]),s._v("\n        Extra: "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("row")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" warning "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[t("code",[s._v("EXPLAIN")]),s._v(" 参数说明：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("id")]),s._v(": SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.")]),s._v(" "),t("li",[t("code",[s._v("select_type")]),s._v(" ⭐ ：SELECT 查询的类型.\n"),t("ul",[t("li",[t("code",[s._v("SIMPLE")]),s._v("：表示此查询不包含 UNION 查询或子查询")]),s._v(" "),t("li",[t("code",[s._v("PRIMARY")]),s._v("：表示此查询是最外层的查询")]),s._v(" "),t("li",[t("code",[s._v("UNION")]),s._v("：表示此查询是 UNION 的第二或随后的查询")]),s._v(" "),t("li",[t("code",[s._v("DEPENDENT UNION")]),s._v("：UNION 中的第二个或后面的查询语句, 取决于外面的查询")]),s._v(" "),t("li",[t("code",[s._v("UNION RESULT")]),s._v("：UNION 的结果")]),s._v(" "),t("li",[t("code",[s._v("SUBQUERY")]),s._v("：子查询中的第一个 SELECT")]),s._v(" "),t("li",[t("code",[s._v("DEPENDENT SUBQUERY")]),s._v(": 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.")])])]),s._v(" "),t("li",[t("code",[s._v("table")]),s._v(": 查询的是哪个表，如果给表起别名了，则显示别名。")]),s._v(" "),t("li",[t("code",[s._v("partitions")]),s._v("：匹配的分区")]),s._v(" "),t("li",[t("code",[s._v("type")]),s._v(" ⭐：表示从表中查询到行所执行的方式，查询方式是 SQL 优化中一个很重要的指标，结果值从好到差依次是：system > const > eq_ref > ref > range > index > ALL。\n"),t("ul",[t("li",[t("code",[s._v("system")]),s._v("/"),t("code",[s._v("const")]),s._v("：表中只有一行数据匹配，此时根据索引查询一次就能找到对应的数据。如果是 B + 树索引，我们知道此时索引构造成了多个层级的树，当查询的索引在树的底层时，查询效率就越低。const 表示此时索引在第一层，只需访问一层便能得到数据。")]),s._v(" "),t("li",[t("code",[s._v("eq_ref")]),s._v("：使用唯一索引扫描，常见于多表连接中使用主键和唯一索引作为关联条件。")]),s._v(" "),t("li",[t("code",[s._v("ref")]),s._v("：非唯一索引扫描，还可见于唯一索引最左原则匹配扫描。")]),s._v(" "),t("li",[t("code",[s._v("range")]),s._v("：索引范围扫描，比如，<，>，between 等操作。")]),s._v(" "),t("li",[t("code",[s._v("index")]),s._v("：索引全表扫描，此时遍历整个索引树。")]),s._v(" "),t("li",[t("code",[s._v("ALL")]),s._v("：表示全表扫描，需要遍历全表来找到对应的行。")])])]),s._v(" "),t("li",[t("code",[s._v("possible_keys")]),s._v("：此次查询中可能选用的索引。")]),s._v(" "),t("li",[t("code",[s._v("key")]),s._v(" ⭐：此次查询中实际使用的索引。")]),s._v(" "),t("li",[t("code",[s._v("ref")]),s._v("：哪个字段或常数与 key 一起被使用。")]),s._v(" "),t("li",[t("code",[s._v("rows")]),s._v(" ⭐：显示此查询一共扫描了多少行，这个是一个估计值。")]),s._v(" "),t("li",[t("code",[s._v("filtered")]),s._v("：表示此查询条件所过滤的数据的百分比。")]),s._v(" "),t("li",[t("code",[s._v("extra")]),s._v("：额外的信息。")])]),s._v(" "),t("blockquote",[t("p",[s._v("更多内容请参考："),t("a",{attrs:{href:"https://segmentfault.com/a/1190000008131735",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL 性能优化神器 Explain 使用分析"),t("OutboundLink")],1)])]),s._v(" "),t("h2",{attrs:{id:"_4-optimizer-trace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-optimizer-trace"}},[s._v("#")]),s._v(" 4. optimizer trace")]),s._v(" "),t("p",[s._v("在 MySQL 5.6 及之后的版本中，我们可以使用 optimizer trace 功能查看优化器生成执行计划的整个过程。有了这个功能，我们不仅可以了解优化器的选择过程，更可以了解每一个执行环节的成本，然后依靠这些信息进一步优化查询。")]),s._v(" "),t("p",[s._v("如下代码所示，打开 optimizer_trace 后，再执行 SQL 就可以查询 information_schema.OPTIMIZER_TRACE 表查看执行计划了，最后可以关闭 optimizer_trace 功能：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" optimizer_trace"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"enabled=on"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" person "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" NAME "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'name84059'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" create_time"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("'"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2020")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("01")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("05")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("00")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" information_schema"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("OPTIMIZER_TRACE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" optimizer_trace"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"enabled=off"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"_5-数据模型和业务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-数据模型和业务"}},[s._v("#")]),s._v(" 5. 数据模型和业务")]),s._v(" "),t("ul",[t("li",[s._v("表字段比较复杂、易变动、结构难以统一的情况下，可以考虑使用 Nosql 来代替关系数据库表存储，如 ElasticSearch、MongoDB。")]),s._v(" "),t("li",[s._v("在高并发情况下的查询操作，可以使用缓存（如 Redis）代替数据库操作，提高并发性能。")]),s._v(" "),t("li",[s._v("数据量增长较快的表，需要考虑水平分表或分库，避免单表操作的性能瓶颈。")]),s._v(" "),t("li",[s._v("除此之外，我们应该通过一些优化，尽量避免比较复杂的 JOIN 查询操作，例如冗余一些字段，减少 JOIN 查询；创建一些中间表，减少 JOIN 查询。")])]),s._v(" "),t("h2",{attrs:{id:"_6-参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-参考资料"}},[s._v("#")]),s._v(" 6. 参考资料")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://book.douban.com/subject/23008813/",target:"_blank",rel:"noopener noreferrer"}},[s._v("《高性能 MySQL》"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/intro/100028001",target:"_blank",rel:"noopener noreferrer"}},[s._v("《Java 性能调优实战》"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/d7665192aaaf",target:"_blank",rel:"noopener noreferrer"}},[s._v("我必须得告诉大家的 MySQL 优化原理"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.jfox.info/20-tiao-mysql-xing-nen-you-hua-de-zui-jia-jing-yan.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("20+ 条 MySQL 性能优化的最佳经验"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000008131735",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL 性能优化神器 Explain 使用分析"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);