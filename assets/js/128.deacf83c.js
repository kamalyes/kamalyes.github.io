(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{442:function(s,a,n){"use strict";n.r(a);var t=n(7),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"javascript-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-基础"}},[s._v("#")]),s._v(" JavaScript 基础")]),s._v(" "),a("p",[s._v("JavaScript（通常缩写为 JS）是一种高级的、解释型的编程语言。JavaScript 是一门基于原型、头等函数的语言，是一门多范式的语言，它支持面向对象程序设计，命令式编程，以及函数式编程。")]),s._v(" "),a("p",[s._v("它被世界上的绝大多数网站所使用，也被世界主流浏览器（Chrome、IE、Firefox、Safari、Opera）支持。")]),s._v(" "),a("p",[s._v("JavaScript 是一种弱类型的动态类型语言。")]),s._v(" "),a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[s._v("#")]),s._v(" 数据类型")]),s._v(" "),a("h3",{attrs:{id:"_1-分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-分类"}},[s._v("#")]),s._v(" 1. 分类")]),s._v(" "),a("ul",[a("li",[s._v("基本(值)类型\n"),a("ul",[a("li",[s._v("String: 任意字符串")]),s._v(" "),a("li",[s._v("Number: 任意的数字")]),s._v(" "),a("li",[s._v("boolean: true/false")]),s._v(" "),a("li",[s._v("undefined: undefined")]),s._v(" "),a("li",[s._v("null: null")])])]),s._v(" "),a("li",[s._v("对象(引用)类型\n"),a("ul",[a("li",[s._v("Object: 任意对象")]),s._v(" "),a("li",[s._v("Function: 一种特别的对象(可以执行)，判断其类型是不是 object 返回的为 true，即 Function 也是一种对象类型的数据")]),s._v(" "),a("li",[s._v("Array: 一种特别的对象(数值下标, 内部数据是有序的，一般的对象中的数据是无序的)，判断其类型是不是 object 返回的为 true，即 Array 也是一种对象类型的数据")])])])]),s._v(" "),a("h3",{attrs:{id:"_2-判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-判断"}},[s._v("#")]),s._v(" 2. 判断")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("typeof:")]),s._v(" "),a("ul",[a("li",[s._v("它可以判断: undefined/ 数值 / 字符串 / 布尔值 / function")]),s._v(" "),a("li",[s._v("它不能判断的:\n"),a("ul",[a("li",[s._v("null 与 object 无法区分，因为判断 null 返回的也是 'object'")]),s._v(" "),a("li",[s._v("object 与 array 也无法区分，因为返回的也都是 'object'")])])]),s._v(" "),a("li",[s._v("注意：typeof 的返回值是 数据类型的字符串表达")])])]),s._v(" "),a("li",[a("p",[s._v("instanceof:")]),s._v(" "),a("ul",[a("li",[s._v("用来判断对象的具体类型")])])]),s._v(" "),a("li",[a("p",[s._v("===")]),s._v(" "),a("ul",[a("li",[s._v("可以判断: undefined, null")])])])]),s._v(" "),a("h3",{attrs:{id:"_3-undefined-与-null-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-undefined-与-null-的区别"}},[s._v("#")]),s._v(" 3. undefined 与 null 的区别?")]),s._v(" "),a("ul",[a("li",[s._v("undefined 代表定义未赋值")]),s._v(" "),a("li",[s._v("null 定义并赋值了, 只是值为 null")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let a;\nconsole.log(a); // undefined\na = null;\nconsole.log(a); // null\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_4-什么时候给变量赋值为-null-呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么时候给变量赋值为-null-呢"}},[s._v("#")]),s._v(" 4. 什么时候给变量赋值为 null 呢?")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("初始赋值, 表明变量将要赋值为对象")])]),s._v(" "),a("li",[a("p",[s._v("结束前, 让对象成为垃圾对象(被垃圾回收器回收)")])])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("//起始\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" // 初始赋值为null, 表明将要赋值为对象\n//确定对象就赋值\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hahaha"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n//最后\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" // 让b指向的对象成为垃圾对象"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("被垃圾回收器回收"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"_5-严格区别变量类型与数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-严格区别变量类型与数据类型"}},[s._v("#")]),s._v(" 5. 严格区别变量类型与数据类型?")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("数据的类型")]),s._v(" "),a("ul",[a("li",[s._v("基本类型")]),s._v(" "),a("li",[s._v("对象类型")])])]),s._v(" "),a("li",[a("p",[s._v("变量的类型(变量内存值的类型)")]),s._v(" "),a("ul",[a("li",[s._v("基本类型: 保存就是基本类型的数据")]),s._v(" "),a("li",[s._v("引用类型: 保存的是地址值")])])]),s._v(" "),a("li",[a("p",[s._v("注意，变量本身是没有类型的，判断变量的类型实际上是判断变量的值的类型")])])]),s._v(" "),a("h2",{attrs:{id:"什么是数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是数据"}},[s._v("#")]),s._v(" 什么是数据?")]),s._v(" "),a("ul",[a("li",[s._v("存储在内存中代表特定信息的'东东', 本质上是二进制的，0101...")]),s._v(" "),a("li",[s._v("数据的特点: 可传递, 可运算")]),s._v(" "),a("li",[s._v("一切皆数据(常说的万事万物皆对象其实有点偏差，毕竟不能说一个基础数据类型的数据是一个对象)")]),s._v(" "),a("li",[s._v("内存中所有操作的目标: 数据")]),s._v(" "),a("li",[s._v("常见的内存中的操作包括：\n"),a("ul",[a("li",[s._v("算术运算")]),s._v(" "),a("li",[s._v("逻辑运算")]),s._v(" "),a("li",[s._v("赋值操作")]),s._v(" "),a("li",[s._v("运行函数")])])])]),s._v(" "),a("h2",{attrs:{id:"什么是内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是内存"}},[s._v("#")]),s._v(" 什么是内存?")]),s._v(" "),a("ul",[a("li",[s._v("内存条通电后产生的可储存数据的空间(是临时的)")]),s._v(" "),a("li",[s._v("内存产生和死亡: 内存条(电路版)==>通电==>产生内存空间==>存储数据==>处理数据==>断电==>内存空间和数据都消失")]),s._v(" "),a("li",[s._v("一块小内存的 2 个数据\n"),a("ul",[a("li",[s._v("内部存储的数据")]),s._v(" "),a("li",[s._v("地址值")])])]),s._v(" "),a("li",[s._v("内存分类")]),s._v(" "),a("li",[s._v("栈: 全局变量/局部变量（标识对象的名称也是在栈空间中，例如函数名，数组名，对象名）")]),s._v(" "),a("li",[s._v("堆: 对象")])]),s._v(" "),a("h2",{attrs:{id:"什么是变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是变量"}},[s._v("#")]),s._v(" 什么是变量?")]),s._v(" "),a("ul",[a("li",[s._v("可变化的量, 由变量名和变量值组成")]),s._v(" "),a("li",[s._v("每个变量都对应的一块小内存, 变量名用来查找对应的内存, 变量值就是内存中保存的数据")])]),s._v(" "),a("h2",{attrs:{id:"内存-数据-变量三者之间的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存-数据-变量三者之间的关系"}},[s._v("#")]),s._v(" 内存,数据, 变量三者之间的关系")]),s._v(" "),a("ul",[a("li",[s._v("内存是用来存储数据的临时的空间")]),s._v(" "),a("li",[s._v("变量是内存的标识")])]),s._v(" "),a("h2",{attrs:{id:"赋值和内存的问题-即内存中到底保存的是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值和内存的问题-即内存中到底保存的是什么"}},[s._v("#")]),s._v(" 赋值和内存的问题，即内存中到底保存的是什么？")]),s._v(" "),a("p",[s._v("问题: let a = xxx, a 内存中到底保存的是什么?")]),s._v(" "),a("ul",[a("li",[s._v("xxx 是基本数据, 保存的就是这个基本数据值")]),s._v(" "),a("li",[s._v("xxx 是对象, 保存的是对象的地址值")]),s._v(" "),a("li",[s._v("xxx 是一个变量, 保存的 xxx 的内存内容(可能是基本数据, 也可能是地址值)")])]),s._v(" "),a("h2",{attrs:{id:"引用变量赋值的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用变量赋值的问题"}},[s._v("#")]),s._v(" 引用变量赋值的问题")]),s._v(" "),a("p",[s._v("关于引用变量赋值问题")]),s._v(" "),a("ul",[a("li",[s._v("2 个引用变量指向同一个对象, 通过一个变量修改对象内部数据, 另一个变量看到的也是修改之后的数据")]),s._v(" "),a("li",[s._v("2 个引用变量指向同一个对象, 让其中一个引用变量指向另一个对象, 另一引用变量依然指向前一个对象")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<script type="text/javascript">\n    let obj1 = { name: "Tom" };\n    let obj2 = obj1;\n    obj2.age = 12;\n    console.log(obj1.age); // 12\n    function fn(obj) {\n    obj.name = "A";\n    }\n    fn(obj1);\n    console.log(obj2.name); //A\n\n    let a = { age: 12 };\n    let b = a;\n    a = { name: "BOB", age: 13 };\n    //此时将a重新赋值，即指向一个新的对象，此时b指向的对象依旧是以前的那个a指向的对象，即 b ={ age: 12 }\n    b.age = 14; //此时b对象的age属性改变了，但是此时的a对象的属性并不会因为b对象属性的改变而改变\n    console.log(b.age, a.name, a.age); // 14 BOB 13\n\n    function fn2(obj) {\n    // 此时修改的是引用变量的值，即让 obj 指向一个新的对象{ age: 15 }，断开obj与a对象之间的指向，但是并不会影响a对象中的属性\n    // 虽然此时obj 指向了一个新的对象，但是在函数执行结束后就能释放了，就变成了一个垃圾对象，会被回收\n    obj = { age: 15 };\n    }\n    // 调用fn2这个函数，将a对象的内容拷贝一份赋值给fn2的形参obj，即此时fn2函数的形参指向的也是 a 对象,存储的也是 a 对象的地址值，\n    // 此时再在fn2函数中重新将obj 指向为其它的对象，只是将obj和原来的指向给断开了，并不会影响原来的对象的属性值， a 依旧指向以前的那个对象，它的属性值还是原来的，并没有被改变\n    fn2(a);\n\n    console.log(a.age); //13\n<\/script>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("h2",{attrs:{id:"js-调用函数时数据传递的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-调用函数时数据传递的问题"}},[s._v("#")]),s._v(" JS 调用函数时数据传递的问题")]),s._v(" "),a("p",[s._v("问题: 在 js 调用函数时传递变量参数时, 是值传递还是引用传递")]),s._v(" "),a("ul",[a("li",[s._v("理解 1: 都是值(基本/地址值)传递")]),s._v(" "),a("li",[s._v("理解 2: 可能是值传递, 也可能是引用传递(地址值)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<script type="text/javascript">\n    let a = 3;\n    function fn(a) {\n    a = a + 1;\n    }\n    //   此时传递的是 3 不是 a,即相当于是fn(3)，在调用函数时，将函数中的形参 a 赋值为3，\n    //   此时函数内部操作的只是形参的数据，和原来的实参 a 没有任何关系，并不会影响原来的 a 的值\n    fn(a);\n    console.log(a);\n\n    function fn2(obj) {\n    // obj.name = "哈哈哈"; //此时修改是obj对象中的属性，并没有将形参obj和外部的实参obj的连接断开，所以会改变原来的obj对象的属性值\n    obj = { name: "去玩儿" }; //此时将形参obj和外部的实参obj的连接断开了，让其指向了新的对象{ name: "去玩儿" }，此时并不会改变外部的原来的obj对象的属性值\n    console.log(obj.name); //此时输出的是内部的形参对象中的属性值，即函数内部的obj对象的name属性值，只要函数内部的形参的属性值改变，这个输出的结果就会被改变\n    }\n    let obj = { name: "Tom" };\n    //   此时传递是的obj对象的地址值，即调用fn2(obj)其实是相当于将原来对象的地址值赋值给了fn2的形参(局部变量obj),\n    fn2(obj);\n<\/script>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h2",{attrs:{id:"js-引擎如何管理内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-引擎如何管理内存"}},[s._v("#")]),s._v(" JS 引擎如何管理内存")]),s._v(" "),a("ul",[a("li",[s._v("1.内存生命周期\n"),a("ul",[a("li",[s._v("1.分配小内存空间, 得到它的使用权")]),s._v(" "),a("li",[s._v("2.存储数据, 可以反复进行操作")]),s._v(" "),a("li",[s._v("3.释放当前被分配的不使用的小内存空间")])])]),s._v(" "),a("li",[s._v("2.释放内存\n"),a("ul",[a("li",[s._v("局部变量: 函数执行完自动释放")]),s._v(" "),a("li",[s._v("对象: 成为垃圾对象==>垃圾回收器回收")]),s._v(" "),a("li",[s._v("全局变量在当前这一次运行中并不会被释放，因为释放了之后在其它地方就无法使用了")])])])]),s._v(" "),a("h2",{attrs:{id:"js-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-对象"}},[s._v("#")]),s._v(" JS 对象")]),s._v(" "),a("h3",{attrs:{id:"_1-什么是对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是对象"}},[s._v("#")]),s._v(" 1. 什么是对象?")]),s._v(" "),a("ul",[a("li",[s._v("多个数据的封装体。")]),s._v(" "),a("li",[s._v("用来保存多个数据的容器。")]),s._v(" "),a("li",[s._v("一个对象代表现实中的一个事物，是该事物在编程中的抽象。")])]),s._v(" "),a("h3",{attrs:{id:"_2-为什么要用对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么要用对象"}},[s._v("#")]),s._v(" 2. 为什么要用对象?")]),s._v(" "),a("ul",[a("li",[s._v("便于对多个数据进行统一管理")])]),s._v(" "),a("h3",{attrs:{id:"_3-对象的组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-对象的组成"}},[s._v("#")]),s._v(" 3. 对象的组成")]),s._v(" "),a("ul",[a("li",[s._v("属性: 由属性名(字符串，只是为了简化写法可以不写双引号或者单引号)和属性值(可以是任意类型的数据)组成，代表现实事物的状态数据。")]),s._v(" "),a("li",[s._v("方法: 一种特别的属性(属性值是函数)，代表现实事物的行为数据。")])]),s._v(" "),a("h3",{attrs:{id:"_4-如何访问对象内部数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何访问对象内部数据"}},[s._v("#")]),s._v(" 4. 如何访问对象内部数据?")]),s._v(" "),a("ul",[a("li",[s._v(".属性名: 编码简单, 但有时不能用")]),s._v(" "),a("li",[s._v("['属性名']: 编码麻烦, 能通用")])]),s._v(" "),a("h3",{attrs:{id:"_5-什么时候必须使用-属性名-的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-什么时候必须使用-属性名-的方式"}},[s._v("#")]),s._v(" 5. 什么时候必须使用['属性名']的方式?")]),s._v(" "),a("ul",[a("li",[s._v("1.属性名包含特殊字符: "),a("code",[s._v("- 或者空格")])]),s._v(" "),a("li",[s._v("2.属性名不确定（属性名是一个变量，如果直接用 .属性名的方式来设置属性值，会导致设置的属性名是变量名，并不是变量的值）")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<script type="text/javascript">\n    let p = {};\n    //1. 需求： 给p对象添加一个属性: content type: text/json\n    // p.content-type = \'text/json\' //不能用,编辑器在代码保存的时候会直接报错\n    p["content-type"] = "text/json";\n    console.log(p["content-type"]);\n\n    //2. 属性名不确定\n    let propName = "myAge";\n    let value = 18;\n    // p.propName = value //不能用，此时表示的是p对象下的propName属性，并不是我们想要的自己设置的那个"myAge"\n    p[propName] = value;\n    console.log(p[propName]);\n<\/script>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[s._v("#")]),s._v(" 函数")]),s._v(" "),a("h3",{attrs:{id:"_1-什么是函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是函数"}},[s._v("#")]),s._v(" 1. 什么是函数?")]),s._v(" "),a("ul",[a("li",[s._v("实现特定功能的 n 条语句的封装体")]),s._v(" "),a("li",[s._v("只有函数是可以执行的, 其它类型的数据都不能执行")])]),s._v(" "),a("h3",{attrs:{id:"_2-为什么要用函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么要用函数"}},[s._v("#")]),s._v(" 2. 为什么要用函数?")]),s._v(" "),a("ul",[a("li",[s._v("提高代码复用")]),s._v(" "),a("li",[s._v("便于阅读交流")])]),s._v(" "),a("h3",{attrs:{id:"_3-如何定义函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何定义函数"}},[s._v("#")]),s._v(" 3. 如何定义函数?")]),s._v(" "),a("ul",[a("li",[s._v("函数声明")]),s._v(" "),a("li",[s._v("表达式")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function fn1() {\n    //函数声明的方式定义函数\n    console.log("fn1()");\n}\nlet fn2 = function () {\n    //表达式的方式定义函数\n    console.log("fn2()");\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"_4-如何调用-执行-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何调用-执行-函数"}},[s._v("#")]),s._v(" 4. 如何调用(执行)函数?")]),s._v(" "),a("ul",[a("li",[s._v("test(): 直接调用")]),s._v(" "),a("li",[s._v("obj.test(): 通过对象调用")]),s._v(" "),a("li",[s._v("new test(): new 调用")]),s._v(" "),a("li",[s._v("test.call/apply(obj): 临时让 test 成为 obj 的方法进行调用")])]),s._v(" "),a("h3",{attrs:{id:"_5-什么函数才是回调函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-什么函数才是回调函数"}},[s._v("#")]),s._v(" 5. 什么函数才是回调函数?")]),s._v(" "),a("ul",[a("li",[s._v("1.你定义的")]),s._v(" "),a("li",[s._v("2.你没有调")]),s._v(" "),a("li",[s._v("3.但最终它执行了(在某个时刻或某个条件下)")])]),s._v(" "),a("h3",{attrs:{id:"_6-常见的回调函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-常见的回调函数"}},[s._v("#")]),s._v(" 6. 常见的回调函数?")]),s._v(" "),a("ul",[a("li",[s._v("dom 事件回调函数 ==>this 是发生事件的 dom 元素")]),s._v(" "),a("li",[s._v("定时器回调函数 ===>this 是 window")]),s._v(" "),a("li",[s._v("ajax 请求回调函数")]),s._v(" "),a("li",[s._v("生命周期回调函数")])]),s._v(" "),a("h2",{attrs:{id:"iife"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iife"}},[s._v("#")]),s._v(" IIFE")]),s._v(" "),a("h3",{attrs:{id:"_1-理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-理解"}},[s._v("#")]),s._v(" 1. 理解")]),s._v(" "),a("p",[s._v("IIFE : Immediately-Invoked Function Expression，立即调用函数表达式,定义时就会立即执行的 JavaScript 函数。")]),s._v(" "),a("h3",{attrs:{id:"_2-作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-作用"}},[s._v("#")]),s._v(" 2. 作用")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("隐藏实现")])]),s._v(" "),a("li",[a("p",[s._v("不会污染外部(全局)命名空间，IIFE 中的匿名函数拥有 独立的词法作用域。这不仅避免了外界访问此 IIFE 中的变量，而且又不会污染全局作用域。")])]),s._v(" "),a("li",[a("p",[s._v("用它来编码 js 模块。")])])]),s._v(" "),a("p",[s._v("-【注意】如果将 IIFE 分配给一个变量，不是存储 IIFE 本身，而是存储 IIFE 执行后返回的结果。")]),s._v(" "),a("h3",{attrs:{id:"_3-写法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-写法"}},[s._v("#")]),s._v(" 3. 写法：")]),s._v(" "),a("ul",[a("li",[s._v("方式一：推荐使用\n(function (){/_ code _/}())")]),s._v(" "),a("li",[s._v("方式二：\n(function (){/_ code _/})()")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<script type="text/javascript">\n    //匿名函数自调用\n    // IIFE 中的匿名函数拥有 独立的词法作用域。这不仅避免了外界访问此 IIFE 中的变量，而且又不会污染全局作用域。\n    // 所以在这个函数中定义的变量能在外面再次定义，因为不属于同一个作用域。其内部定义的变量不会和外部的变量发生冲突\n    (function () {\n    let a = 3;\n    console.log(a + 3);\n    })();\n    let a = 4;\n    console.log(a);\n    (function () {\n    let a = 1;\n    function test() {\n        console.log(++a);\n    }\n    // 向外暴露一个全局函数\n    window.$ = function () {\n        return {\n        test: test,\n        };\n    };\n    })();\n\n    $().test(); // 1. $是一个函数 2. $执行后返回的是一个对象\n<\/script>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("h2",{attrs:{id:"js-中的-this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-中的-this"}},[s._v("#")]),s._v(" JS 中的 this")]),s._v(" "),a("h3",{attrs:{id:"_1-this-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-this-是什么"}},[s._v("#")]),s._v(" 1. this 是什么?")]),s._v(" "),a("ul",[a("li",[s._v("任何函数本质上都是通过某个对象来调用的,如果没有直接指定就是 window")]),s._v(" "),a("li",[s._v("所有函数内部都有一个变量 this")]),s._v(" "),a("li",[s._v("它的值是调用函数的当前对象")])]),s._v(" "),a("h3",{attrs:{id:"_2-如何确定-this-的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何确定-this-的值"}},[s._v("#")]),s._v(" 2. 如何确定 this 的值?")]),s._v(" "),a("ul",[a("li",[s._v("test(): window,此时相当于是 window 来调用的 test()方法")]),s._v(" "),a("li",[s._v("p.test(): p")]),s._v(" "),a("li",[s._v("new test(): 新创建的对象")]),s._v(" "),a("li",[s._v("p.call(obj): obj")])])])}),[],!1,null,null,null);a.default=e.exports}}]);